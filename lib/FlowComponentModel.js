!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(1),i=n(2);!function(e){e[e.unknown=0]="unknown",e[e.ContentString=1]="ContentString",e[e.ContentNumber=2]="ContentNumber",e[e.ContentObject=3]="ContentObject",e[e.ContentBoolean=4]="ContentBoolean",e[e.ContentList=5]="ContentList",e[e.ContentPassword=6]="ContentPassword",e[e.ContentContent=7]="ContentContent",e[e.ContentDateTime=8]="ContentDateTime",e[e.ContentEncrypted=9]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){if(this.ContentType=o.unknown,this.DeveloperName="",this.TypeElementDeveloperName="",this.TypeElementId="",this.TypeElementPropertyDeveloperName="",this.TypeElementPropertyId="",this.ValueElementId="",e)switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowField=function(){var e="",t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value?this.Value:""}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(7),r=function(){function e(e){if(this.DeveloperName="",this.ExternalId="",this.InternalId="",this.IsSelected=!1,this.Order=0,this.TypeElementId="",this.Properties={},e&&e[0]){var t=e[0];this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected,this.TypeElementId=t.typeElementId;for(var n=0,r=t.properties;n<r.length;n++){var i=r[n];this.Properties[i.developerName]=new o.FlowObjectDataProperty(i)}}}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!0,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:"",internalId:manywho.utils.guid(),isSelected:!0,order:0,properties:[],typeElementId:""}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.clone=function(t){var n=this,o=e.newInstance(t||this.DeveloperName);return Object.keys(this.properties).forEach((function(e){var t=n.properties[e].clone();o.properties[e]=t})),o},e.prototype.iObjectData=function(){for(var e=[],t=0,n=Object.keys(this.properties);t<n.length;t++){var o=n[t];e.push(this.properties[o].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:this.isSelected,order:this.order,properties:e,typeElementId:this.TypeElementId}},e.prototype.iFlowObjectDataArray=function(){var e=[];return e.push(this.iObjectData()),e},e}();t.FlowObjectData=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),i=n(1);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new i.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!0,configurable:!0}),e.prototype.sort=function(e,t){return e===o.ascending?t?this.Items.sort((function(e,n){var o,i;switch(e.properties[t].contentType){case r.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),i=parseFloat(n.properties[t].value);break;case r.eContentType.ContentDateTime:o=new Date(e.properties[t].value),i=new Date(n.properties[t].value);break;default:o=e.properties[t].value,i=n.properties[t].value}switch(!0){case o<i:return-1;case o>i:return 1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order})):t?this.Items.sort((function(e,n){if(!(e&&n&&e.properties&&n.properties&&e.properties[t]&&n.properties[t]&&e.properties[t].value&&n.properties[t].value))return 0;if(!e.properties[t])return 0;switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order}))},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.clone=function(){var t=new e;return this.items.forEach((function(e){t.addItem(e.clone())})),t},e.prototype.iFlowObjectDataArray=function(){for(var e=[],t=0,n=this.Items;t<n.length;t++){var o=n[t];e.push(o.iObjectData())}return e},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,i=this.Items;o<i.length;o++){var a=i[o];if(a.properties[e]&&null!=a.properties[e].value){var s=a.properties[e].value,u=t;switch(a.properties[e].contentType){case r.eContentType.ContentString:s=s.toLowerCase(),u=u.toLowerCase();break;case r.eContentType.ContentNumber:s=s,u=parseFloat(u.toLowerCase());break;case r.eContentType.ContentBoolean:s=s,u="true"===new String(u).toLowerCase()}if(s===u)return a.properties[n]}}return null},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var i=o[n];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=new String(s).toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return i}}},e.prototype.getIndexOfItemWithPropertyValue=function(e,t){for(var n=0;n<this.items.length;n++){var o=this.items[n];if(o.properties[e]&&null!=o.properties[e].value){var i=o.properties[e].value,a=t;switch(o.properties[e].contentType){case r.eContentType.ContentString:i=i.toLowerCase(),a=a.toLowerCase();break;case r.eContentType.ContentNumber:i=i,a=parseFloat(new String(a).toLowerCase());break;case r.eContentType.ContentBoolean:i=i,a="true"===new String(a).toLowerCase()}if(i===a)return n}}return-1},e.prototype.removeItemWithPropertyValue=function(e,t){for(var n=0,o=0;o<this.items.length;o++){var i=this.items[o];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}a===s&&(this.items.splice(o,1),n++)}}return n},e.prototype.removeItemAtIndex=function(e){var t=0;return this.items[e]&&(this.items.splice(e,1),t=e),t},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(a,s)}u((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(4);n(11);var u,l=n(5),c=n(6),p=n(0),d=n(1),h=n(2),f=n(8),y=n(12);!function(e){e[e.ready=0]="ready",e[e.loading=1]="loading",e[e.saving=2]="saving",e[e.moving=3]="moving",e[e.inititializing=4]="inititializing",e[e.inititialized=5]="inititialized",e[e.mounting=6]="mounting",e[e.mounted=7]="mounted"}(u=t.eLoadingState||(t.eLoadingState={}));var m=function(e){function t(t){var n=e.call(this,t)||this;n.Fields={},n.Attributes={},n.Outcomes={},n.sendCollaborationMessage=y(n._sendCollaborationMessage,100,null),n.Fields={},n.LoadingState=u.inititializing,n.loadValues=n.loadValues.bind(n),n.dontLoadValues=n.dontLoadValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),n.sendCollaborationMessage=n.sendCollaborationMessage.bind(n),n.onBeforeSend=n.onBeforeSend.bind(n),n.onDone=n.onDone.bind(n),n.calculateValue=n.calculateValue.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o=manywho.settings.global("platform.uri")||window.location.origin||"https://flow.manywho.com";return n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n.valueurl=o+"/api/run/1/state/"+n.StateId+"/values/name",n.LoadingState=u.inititialized,n}return r(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isReady",{get:function(){return this.LoadingState===u.ready},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isDesignTime",{get:function(){return this.IsDesignTime},enumerable:!0,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.onBeforeSend=function(e,t){if(t){var n=this.getOutcomeById(t.mapElementInvokeRequest.selectedOutcomeId),o=manywho.eventManager.outcomeBeingTriggered;n&&(o&&o.id===n.id||(manywho.eventManager.outcomeBeingTriggered=n))}else manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.calculateValue=function(e){return i(this,void 0,void 0,(function(){var t,n,o,r,i,s;return a(this,(function(a){switch(a.label){case 0:if(!e.startsWith("{{")||!e.endsWith("}}"))return[3,7];t=(t=e.replace("{{","")).replace("}}",""),n=void 0,o="",r=t.split("."),i=0,a.label=1;case 1:return i<r.length?0!==i?[3,4]:this.fields[r[i]]?[3,3]:[4,this.loadValue(r[i])]:[3,6];case 2:a.sent(),a.label=3;case 3:return(n=this.fields[r[i]])?n.ContentType!==p.eContentType.ContentObject&&n.ContentType!==p.eContentType.ContentList&&(o=n.value):(console.log("The Value ["+r[i]+"] was not found, have you included it in your flow"),o=e),[3,5];case 4:n&&(s=n.value.properties[r[i]])?s.contentType===p.eContentType.ContentObject||s.contentType===p.eContentType.ContentList?n=n.value.properties[r[i]].value:o=n.value.properties[r[i]].value:o=e,a.label=5;case 5:return i++,[3,1];case 6:return[2,o];case 7:return[2,e]}}))}))},t.prototype.onDone=function(e,t){var n=this;if(manywho.eventManager.outcomeBeingTriggered&&manywho.eventManager.outcomeBeingTriggered.attributes){var o=manywho.eventManager.outcomeBeingTriggered;Object.keys(manywho.eventManager.outcomeBeingTriggered.attributes).forEach((function(e){return i(n,void 0,void 0,(function(){var t,n,r;return a(this,(function(i){switch(i.label){case 0:switch(t=manywho.eventManager.outcomeBeingTriggered.attributes[e],t.name.toLowerCase()){case"autoclose":return[3,1];case"autoopen":return[3,2];case"autonav":case"automove":return[3,6];case"autoprint":return[3,10]}return[3,11];case 1:return"true"===t.value.toLowerCase()&&window.close(),[3,11];case 2:return(n=o.attributes.AutoOpenUrl||void 0)&&n.value.length>0?[4,this.calculateValue(n.value)]:[3,4];case 3:return r=i.sent(),window.open(r,"_blank"),[3,5];case 4:alert("No 'AutoOpenUrl' specified in the outcome's attributes"),i.label=5;case 5:return[3,11];case 6:return(n=o.attributes.AutoNavUrl||void 0)&&n.value.length>0?[4,this.calculateValue(n.value)]:[3,8];case 7:return r=i.sent(),window.open(r,"_blank"),[3,9];case 8:alert("No 'AutoNavUrl' specified in the outcome's attributes"),i.label=9;case 9:return[3,11];case 10:return window.print(),[3,11];case 11:return[2]}}))}))}))}this.LoadingState=u.ready,manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){var e,t,n,o;return a(this,(function(r){switch(r.label){case 0:switch(this.LoadingState=u.mounting,manywho.eventManager.addDoneListener(this.onDone,this.componentId+"_core"),manywho.eventManager.addBeforeSendListener(this.onBeforeSend,this.componentId+"_core"),e=manywho.model.getComponent(this.ComponentId,this.FlowKey),t=manywho.state.getComponent(this.componentId,this.flowKey)||{},e.contentType){case"ContentObject":return[3,1];case"ContentList":return[3,4]}return[3,7];case 1:return n=void 0,t.objectData&&t.objectData.length>0?(n=t.objectData,n=JSON.parse(JSON.stringify(n)),[4,this.setStateValue(new d.FlowObjectData(n),!0)]):[3,3];case 2:r.sent(),r.label=3;case 3:return[3,9];case 4:return o=void 0,t.objectData&&t.objectData.length>0?(o=t.objectData,o=JSON.parse(JSON.stringify(o)),[4,this.setStateValue(new h.FlowObjectDataArray(o),!0)]):[3,6];case 5:r.sent(),r.label=6;case 6:return[3,9];case 7:return[4,this.setStateValue(e.contentValue,!0)];case 8:return r.sent(),[3,9];case 9:return this.LoadingState=u.mounted,manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){return manywho.eventManager.removeBeforeSendListener(this.componentId+"_core"),manywho.eventManager.removeDoneListener(this.componentId+"_core"),[2,Promise.resolve()]}))}))},t.prototype.loadOutcome=function(e){if(e){var t=manywho.model.getOutcome(e,this.props.flowKey);if(t)return this.Outcomes[t.developerName]=new f.FlowOutcome(t),this.Outcomes[t.developerName]}},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}for(var r=0,i=e=manywho.model.getOutcomes("",this.props.flowKey);r<i.length;r++){o=i[r];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}},t.prototype.getOutcomeById=function(e){var t,n=this;return Object.keys(this.outcomes).forEach((function(o){n.outcomes[o].id===e&&(t=n.outcomes[o])})),t||(t=this.loadOutcome(e)),t},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).attributes;if(e)for(var t=0,n=Object.keys(e);t<n.length;t++){var o=n[t];this.Attributes[o]=new l.FlowAttribute(o,e[o])}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var r=o[n];this.Model.dataSource.addItem(new d.FlowObjectData([r]))}var i=e.columns;if(i)for(var a=0,s=i;a<s.length;a++){var u=s[a];this.Model.displayColumns.push(new c.FlowDisplayColumn(u))}}},t.prototype.loadValue=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){return this.LoadingState=u.loading,(t=manywho.connection.request(this,"",this.valueurl+"/"+e,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),{}))&&(this.Fields[t.developerName]=new p.FlowField(t)),this.LoadingState=u.ready,[2,Promise.resolve()]}))}))},t.prototype.getResultBodyText=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(t){return[2,e.text().then((function(e){return e.startsWith('"')&&(e=e.substr(1)),e.endsWith('"')&&(e=e.substr(0,e.length-1)),e}))]}))}))},t.prototype.callRequest=function(e,t,n,o){return i(this,void 0,void 0,(function(){var r,s,u=this;return a(this,(function(l){switch(l.label){case 0:return r=[],(s={}).method=t,s.headers={"Content-Type":"application/json",Authorization:o,ManyWhoTenant:this.tenantId},s.credentials="same-origin","POST"!==t&&"PUT"!==t||(s.body=n),[4,fetch(e,s).then((function(e){return i(u,void 0,void 0,(function(){var t,n;return a(this,(function(o){switch(o.label){case 0:return 200!==e.status?[3,2]:[4,this.getResultBodyText(e)];case 1:return t=o.sent(),JSON.parse(t).forEach((function(e){r.push(e)})),console.log("Loaded Values"),[2,r];case 2:return[4,this.getResultBodyText(e)];case 3:return n=o.sent(),console.log("Can't load values - "+n),[2,r]}}))}))}))];case 1:return l.sent(),[2]}}))}))},t.prototype.callRequestOld=function(e,t,n){return i(this,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return[4,manywho.connection.request(this,null,e,t,this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 1:return[2,n.sent()]}}))}))},t.prototype.loadValues=function(){return i(this,void 0,void 0,(function(){var e,t,n,o=this;return a(this,(function(r){switch(r.label){case 0:return this.LoadingState=u.loading,this.Fields={},[4,this.callRequestOld(this.url,"GET",{})];case 1:return(r.sent()||[]).map((function(e){e&&(o.Fields[e.developerName]=new p.FlowField(e))})),[4,this.callRequestOld(this.userurl,"GET",{})];case 2:return(e=r.sent())&&(t=new p.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=u.ready,[2,Promise.resolve()]}}))}))},t.prototype.dontLoadValues=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.LoadingState=u.ready,[2,Promise.resolve()]}))}))},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);switch(t.contentType){case"ContentObject":return new d.FlowObjectData(e.objectData&&e.objectData[0]?e.objectData[0]:t.objectData[0]);case"ContentList":return new h.FlowObjectDataArray(e.objectData?e.objectData:t.objectData);default:return e.contentValue?e.contentValue:""}},t.prototype.getStateValueType=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);switch(t.contentType){case"ContentObject":return new d.FlowObjectData(e.objectData&&e.objectData[0]?e.objectData[0]:t.objectData[0]);case"ContentList":return new h.FlowObjectDataArray(e.objectData?e.objectData:t.objectData);default:return e.contentValue?e.contentValue:""}},t.prototype.setStateValue=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r,i;return a(this,(function(a){if(this.LoadingState===u.mounting||this.LoadingState===u.ready){switch(t=this.loadingState,this.LoadingState=u.saving,n=manywho.model.getComponent(this.ComponentId,this.FlowKey),manywho.state.getComponent(this.componentId,this.flowKey)||{},o=void 0,n.contentType){case"ContentObject":r=null,e&&(r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r))),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":i=null,e&&(i=e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(i))),o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":o={contentValue:e.toISOString()},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:o={contentValue:e},manywho.state.setComponent(this.componentId,o,this.flowKey,!0)}this.LoadingState=t,manywho.collaboration.isInitialized(this.flowKey)}return[2,Promise.resolve()]}))}))},t.prototype.eventHandled=function(e,t){console.log("ping")},t.prototype.updateValues=function(e){return i(this,void 0,void 0,(function(){var t,n,o,r,i=this;return a(this,(function(a){switch(a.label){case 0:if(this.LoadingState=u.saving,t=[],e.constructor.name===p.FlowField.name)t.push(e.iFlowField());else for(n=0,o=e;n<o.length;n++)r=o[n],t.push(r.iFlowField());return[4,manywho.connection.request(this,null,this.url,"POST",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),t)];case 1:return a.sent(),manywho.collaboration.isInitialized(this.flowKey)&&t.forEach((function(e){manywho.collaboration.push(i.ComponentId,{message:{action:"REFRESH_FIELD",fieldName:e.developerName}},i.flowKey)})),this.LoadingState=u.ready,[2,Promise.resolve()]}}))}))},t.prototype._sendCollaborationMessage=function(e){manywho.collaboration.isInitialized(this.flowKey)&&manywho.collaboration.push(this.ComponentId,{message:e},this.flowKey)},t.prototype.triggerOutcome=function(e,t){return i(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=u.moving,t||(t=[]),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2,Promise.resolve()]}}))}))},t.prototype.moveTo=function(e,t){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.LoadingState=u.moving,t||(t=[]),[2,Promise.resolve()]}))}))},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return i(this,void 0,void 0,(function(){var e,n,r;return a(this,(function(i){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(r={}).id=t,r.developerName=null,r.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,"",n,"POST",this.TenantId,"",manywho.state.getAuthenticationToken(this.FlowKey),r),[2,Promise.resolve()]}))}))},t.prototype.launchFlowTab=function(e,t,n,o){return i(this,void 0,void 0,(function(){var o,r;return a(this,(function(i){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",r=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(r,"_new"),[2,Promise.resolve()]}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){switch(n.label){case 0:if(e=manywho.state.getComponent(this.componentId,this.flowKey),t=e.message,this.loadModel(),t&&manywho.state.setComponent(this.componentId,{message:{}},this.flowKey,!1),!t||!t.action)return[3,6];switch(t.action.toUpperCase()){case"REFRESH_FIELDS":return[3,1];case"REFRESH_FIELD":return[3,3]}return[3,5];case 1:return[4,this.loadValues()];case 2:return n.sent(),[3,6];case 3:return[4,this.loadValue(t.fieldName)];case 4:return n.sent(),[3,6];case 5:return[3,6];case 6:return[2,t]}}))}))},t.prototype.receiveMessage=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:if(!e.data)return[3,9];if(!(t=e.data).action)return[3,9];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1];case"REFRESH_FIELDS":return[3,3];case"REFRESH_FIELD":return[3,5]}return[3,7];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,9];case 3:return[4,this.loadValues()];case 4:return n.sent(),[3,9];case 5:return[4,this.loadValue(t.fieldName)];case 6:return n.sent(),[3,9];case 7:return[4,this.handleMessage(t)];case 8:return n.sent(),[3,9];case 9:return[2,Promise.resolve()]}}))}))},t.prototype.handleMessage=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return[2,Promise.resolve()]}))}))},t}(s.Component);t.FlowBaseComponent=m},function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!0,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=o.eContentType[e.contentType],this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!0,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(2),a=function(){function e(e){if(this.ContentFormat="",this.ContentType=o.eContentType.unknown,this.DeveloperName="",this.TypeElementId="",this.TypeElementPropertyId="",e)switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat?e.contentFormat:"",this.TypeElementId=e.typeElementId?e.typeElementId:"",this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.eContentType.ContentList:this.value=e.objectData?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.value=e.contentValue?e.contentValue:""}}return e.newInstance=function(e,t,n){var r="",i=[];switch(t){case o.eContentType.ContentObject:var a=n;i.push(a.iObjectData());break;case o.eContentType.ContentList:i=n.iFlowObjectDataArray();break;default:r=n}return new this({contentFormat:"",contentType:o.eContentType[t],contentValue:r,developerName:e,objectData:i,typeElementId:"",typeElementPropertyId:""})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.clone=function(){var t;switch(this.contentType){case o.eContentType.ContentList:t=new i.FlowObjectDataArray,this.value.items.forEach((function(e){t.addItem(e.clone(e.developerName))}));break;case o.eContentType.ContentObject:t=this.value.clone(this.value.developerName);break;default:t=this.value}return e.newInstance(this.developerName,this.contentType,t)},e.prototype.iFlowObjectDataProperty=function(){var e="",t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},Object.defineProperty(e.prototype,"displayString",{get:function(){var e="";if(this.Value)switch(this.ContentType){case o.eContentType.ContentString:case o.eContentType.ContentNumber:e=this.Value;break;case o.eContentType.ContentBoolean:e=!0===this.Value?"True":"False";break;case o.eContentType.ContentDateTime:var t=Date.parse(this.Value);if(!isNaN(t)){var n=new Date(t);return e.length<=10?n.toLocaleDateString():n.toLocaleString()}break;default:e=o.eContentType[this.ContentType]}else e="Undefined";return e},enumerable:!0,configurable:!0}),e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(5);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var r=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var r=n[t];this.Attributes[r]=new o.FlowAttribute(r,e.attributes[r])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=r},function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(10)),o(n(14)),o(n(15)),o(n(17)),o(n(3)),o(n(5)),o(n(6)),o(n(0)),o(n(1)),o(n(2)),o(n(7)),o(n(8))},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(a,s)}u((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadValues()];case 2:return t.sent(),[2]}}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidUpdate.call(this)];case 1:return t.sent(),[2]}}))}))},t}(n(3).FlowBaseComponent);t.FlowComponent=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.beforeSend=function(e,t){for(var n in manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}))},function(e,t,n){(function(t){var n="Expected a function",o=NaN,r="[object Symbol]",i=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,u=/^0o[0-7]+$/i,l=parseInt,c="object"==typeof t&&t&&t.Object===Object&&t,p="object"==typeof self&&self&&self.Object===Object&&self,d=c||p||Function("return this")(),h=Object.prototype.toString,f=Math.max,y=Math.min,m=function(){return d.Date.now()};function b(e,t,o){var r,i,a,s,u,l,c=0,p=!1,d=!1,h=!0;if("function"!=typeof e)throw new TypeError(n);function b(t){var n=r,o=i;return r=i=void 0,c=t,s=e.apply(o,n)}function w(e){var n=e-l;return void 0===l||n>=t||n<0||d&&e-c>=a}function O(){var e=m();if(w(e))return C(e);u=setTimeout(O,function(e){var n=t-(e-l);return d?y(n,a-(e-c)):n}(e))}function C(e){return u=void 0,h&&r?b(e):(r=i=void 0,s)}function T(){var e=m(),n=w(e);if(r=arguments,i=this,l=e,n){if(void 0===u)return function(e){return c=e,u=setTimeout(O,t),p?b(e):s}(l);if(d)return u=setTimeout(O,t),b(l)}return void 0===u&&(u=setTimeout(O,t)),s}return t=v(t)||0,g(o)&&(p=!!o.leading,a=(d="maxWait"in o)?f(v(o.maxWait)||0,t):a,h="trailing"in o?!!o.trailing:h),T.cancel=function(){void 0!==u&&clearTimeout(u),c=0,r=l=i=u=void 0},T.flush=function(){return void 0===u?s:C(m())},T}function g(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function v(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&h.call(e)==r}(e))return o;if(g(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=g(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=s.test(e);return n||u.test(e)?l(e.slice(2),n?2:8):a.test(e)?o:+e}e.exports=function(e,t,o){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError(n);return g(o)&&(r="leading"in o?!!o.leading:r,i="trailing"in o?!!o.trailing:i),b(e,t,{leading:r,maxWait:t,trailing:i})}}).call(this,n(13))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(a,s)}u((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t){var n=e.call(this,t)||this;return n.reloadValues=n.reloadValues.bind(n),n}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),manywho.eventManager.addDoneListener(this.reloadValues,this.componentId+"_PG"),[4,this.loadValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidUpdate.call(this)];case 1:return t.sent(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId+"_PG"),[2,Promise.resolve()]}}))}))},t.prototype.triggerOutcome=function(t,n){return i(this,void 0,void 0,(function(){return a(this,(function(o){switch(o.label){case 0:return[4,e.prototype.triggerOutcome.call(this,t,n)];case 1:return o.sent(),[2,Promise.resolve()]}}))}))},t.prototype.reloadValues=function(e,t){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.loadModel()];case 1:return e.sent(),[4,this.loadValues()];case 2:return e.sent(),[4,this.forceUpdate()];case 3:return e.sent(),[2,Promise.resolve()]}}))}))},t}(n(3).FlowBaseComponent);t.FlowPage=s},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(4);n(16);var a,s=function(e,t){this.label=e,this.handler=t};t.modalDialogButton=s,function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(a=t.eDragEventType||(t.eDragEventType={}));var u=function(){function e(){this.type=a.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,o,r){var i=new e;return i.type=t,i.sourceElement=n,i.targetElement=null,i.mouseX=o,i.mouseY=r,i.mouseOffsetX=o,i.mouseOffsetY=r,i},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=a.unknown},e}();t.DragEvent=u;var l=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new u,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.onCloseRequest=n.onCloseRequest.bind(n),n}return r(t,e),t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){if(this.dialog){var e=this.dialog.offsetParent.clientWidth/2,t=this.dialog.offsetParent.clientHeight/2,n=this.dialog.clientWidth/2,o=this.dialog.clientHeight/2;this.left=e-n,this.top=t-o,this.forceUpdate(),this.dialog.classList.add("shown"),this.forceUpdate()}},t.prototype.componentWillUnmount=function(){},t.prototype.onCloseRequest=function(){this.props.onCloseRequest&&this.props.onCloseRequest()},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.onCloseRequest()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.onCloseRequest()},t.prototype.render=function(){var e=this,t={};t.left=this.left,t.top=this.top;for(var n=[],o=function(e){n.push(i.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},r=0,a=this.props.buttons;r<a.length;r++){o(a[r])}return i.createElement("div",{className:"modal-redaction",onMouseMove:function(t){e.onMouseMove(t)},onMouseUp:function(t){e.onMouseUp(t)},onMouseDown:function(t){e.handleOutsideClick(t)}},i.createElement("div",{style:t,className:"modal-content",ref:function(t){return e.dialog=t}},i.createElement("div",{className:"modal-dialog"},i.createElement("div",{className:"modal-dialog-header",onMouseDown:function(t){e.onMouseDown(t)}},i.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},i.createElement("span",{className:"modal-dialog-header-title"},this.props.title)),i.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},i.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(t){t.stopPropagation(),e.props.onClose("cancel")}}))),i.createElement("div",{className:"modal-dialog-body"},i.createElement("div",{className:"modal-dialog-body-client"},this.props.children)),i.createElement("div",{className:"modal-dialog-button-bar"},n))))},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.forceUpdate()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;console.log("grab dialog"),this.dragEvent=u.start(a.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===a.dialog&&(console.log("move dialog"),this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY))},t.prototype.onMouseUp=function(e){this.dragEvent.type===a.dialog&&(console.log("drop dialog"),this.dragEvent.end(null,e.clientX,e.clientY))},t}(i.Component);t.ModalDialog=l},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(4);n(18);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.icons={},n.selectedItem=n.props.onChangeValue,n.icons.asterisk={name:"asterisk",title:"Asterisk",code:"&#x2a;"},n.icons.plus={name:"plus",title:"Plus",code:"&#x2b;"},n.icons.euro={name:"euro",title:"Euro",code:"&#x20ac;"},n.icons.minus={name:"minus",title:"Minus",code:"&#x2212;"},n.icons.cloud={name:"cloud",title:"Cloud",code:"&#x2601;"},n.onchange=n.onchange.bind(n),n}return r(t,e),t.prototype.onchange=function(e){this.selectedItem=e.target.innerText,this.props.onChange&&this.props.onChange(this.selectedItem),this.forceUpdate()},t.prototype.render=function(){for(var e=this,t=[],n=0,o=Object.keys(this.icons);n<o.length;n++){var r=o[n],a="glyphicon glyphicon-"+this.icons[r].name+" icon-picker-icon";t.push(i.createElement("li",{onClick:function(t){e.onchange(t)}},i.createElement("span",{className:a}),this.icons[r].name))}return i.createElement("div",{className:"btn-group"},i.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},i.createElement("span",{className:"glyphicon glyphicon-"+this.selectedItem}),i.createElement("span",{className:"caret"})),i.createElement("ul",{className:"dropdown-menu",role:"menu"},t))},t}(i.Component);t.default=a},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zsb3dGaWVsZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRmxvd09iamVjdERhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zsb3dPYmplY3REYXRhQXJyYXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zsb3dCYXNlQ29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdFwiIiwid2VicGFjazovLy8uL3NyYy9GbG93QXR0cmlidXRlLnRzIiwid2VicGFjazovLy8uL3NyYy9GbG93RGlzcGxheUNvbHVtbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRmxvd09iamVjdERhdGFQcm9wZXJ0eS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvRmxvd091dGNvbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvRmxvd0NvbXBvbmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50TWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLnRocm90dGxlL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Zsb3dQYWdlLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvTW9kYWxEaWFsb2cudHN4Iiwid2VicGFjazovLy8uL3NyYy9JY29uUGlja2VyLnRzeCJdLCJuYW1lcyI6WyJlbnVtZXJhYmxlIiwiZ2V0IiwiZ2V0dGVyIiwidmFsdWUiLCJrZXkiLCJiaW5kIiwibW9kdWxlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwib2JqZWN0IiwicHJvcGVydHkiLCJlQ29udGVudFR5cGUiLCJmaWVsZCIsIkNvbnRlbnRUeXBlIiwidW5rbm93biIsIkRldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudERldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudElkIiwiVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUiLCJUeXBlRWxlbWVudFByb3BlcnR5SWQiLCJWYWx1ZUVsZW1lbnRJZCIsInRoaXMiLCJjb250ZW50VHlwZSIsImRldmVsb3Blck5hbWUiLCJ0eXBlRWxlbWVudERldmVsb3Blck5hbWUiLCJ0eXBlRWxlbWVudElkIiwidHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUiLCJ0eXBlRWxlbWVudFByb3BlcnR5SWQiLCJ2YWx1ZUVsZW1lbnRJZCIsIkNvbnRlbnRPYmplY3QiLCJWYWx1ZSIsIm9iamVjdERhdGEiLCJGbG93T2JqZWN0RGF0YSIsInVuZGVmaW5lZCIsIkNvbnRlbnRMaXN0IiwiRmxvd09iamVjdERhdGFBcnJheSIsImNvbnRlbnRWYWx1ZSIsImlGbG93RmllbGQiLCJvZCIsInB1c2giLCJpT2JqZWN0RGF0YSIsImlGbG93T2JqZWN0RGF0YUFycmF5IiwiRmxvd0ZpZWxkIiwiZGF0YSIsIkV4dGVybmFsSWQiLCJJbnRlcm5hbElkIiwiSXNTZWxlY3RlZCIsIk9yZGVyIiwiUHJvcGVydGllcyIsImludGVybmFsSWQiLCJleHRlcm5hbElkIiwib3JkZXIiLCJpc1NlbGVjdGVkIiwicHJvcGVydGllcyIsIkZsb3dPYmplY3REYXRhUHJvcGVydHkiLCJuZXdJbnN0YW5jZSIsIm1hbnl3aG8iLCJ1dGlscyIsImd1aWQiLCJhZGRQcm9wZXJ0eSIsIm5ld1Byb3BlcnR5IiwicmVtb3ZlUHJvcGVydHkiLCJjbG9uZSIsIm5ld1R5cGVOYW1lIiwia2V5cyIsImZvckVhY2giLCJuZXdQcm9wIiwicHJvcHMiLCJpRmxvd09iamVjdERhdGFQcm9wZXJ0eSIsIm91dHB1dCIsImVTb3J0T3JkZXIiLCJhcnJheSIsIkl0ZW1zIiwiaXRlbSIsInNvcnQiLCJmaWVsZE5hbWUiLCJhc2NlbmRpbmciLCJhIiwiYiIsInZhbEEiLCJ2YWxCIiwiQ29udGVudE51bWJlciIsInBhcnNlRmxvYXQiLCJDb250ZW50RGF0ZVRpbWUiLCJEYXRlIiwiYWRkSXRlbSIsImNsZWFySXRlbXMiLCJpdGVtcyIsIm9iaiIsImdldEl0ZW1XaXRoUHJvcGVydHlOYW1lIiwiZmluZFByb3BlcnR5Iiwid2l0aFZhbHVlIiwicmV0dXJuUHJvcGVydHkiLCJjb21wYXJlVG8iLCJDb250ZW50U3RyaW5nIiwidG9Mb3dlckNhc2UiLCJDb250ZW50Qm9vbGVhbiIsIlN0cmluZyIsImdldEl0ZW1XaXRoUHJvcGVydHlWYWx1ZSIsImdldEluZGV4T2ZJdGVtV2l0aFByb3BlcnR5VmFsdWUiLCJwb3MiLCJsZW5ndGgiLCJyZW1vdmVJdGVtV2l0aFByb3BlcnR5VmFsdWUiLCJtb2RpZmllZENvdW50Iiwic3BsaWNlIiwicmVtb3ZlSXRlbUF0SW5kZXgiLCJpbmRleCIsImVMb2FkaW5nU3RhdGUiLCJ0aHJvdHRsZSIsIkZpZWxkcyIsIkF0dHJpYnV0ZXMiLCJPdXRjb21lcyIsInNlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSIsIl9zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UiLCJMb2FkaW5nU3RhdGUiLCJpbml0aXRpYWxpemluZyIsImxvYWRWYWx1ZXMiLCJkb250TG9hZFZhbHVlcyIsInVwZGF0ZVZhbHVlcyIsInRyaWdnZXJPdXRjb21lIiwiQ29tcG9uZW50SWQiLCJpZCIsIlBhcmVudElkIiwicGFyZW50SWQiLCJGbG93S2V5IiwiZmxvd0tleSIsImxvYWRNb2RlbCIsImxvYWRBdHRyaWJ1dGVzIiwibG9hZE91dGNvbWVzIiwicmVjZWl2ZU1lc3NhZ2UiLCJnZXRTdGF0ZVZhbHVlIiwic2V0U3RhdGVWYWx1ZSIsImdldFN0YXRlVmFsdWVUeXBlIiwib25CZWZvcmVTZW5kIiwib25Eb25lIiwiY2FsY3VsYXRlVmFsdWUiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiYmFzZVVybCIsInNldHRpbmdzIiwiZ2xvYmFsIiwibG9jYXRpb24iLCJvcmlnaW4iLCJTdGF0ZUlkIiwiZXh0cmFjdFN0YXRlSWQiLCJUZW5hbnRJZCIsImV4dHJhY3RUZW5hbnRJZCIsInVybCIsInVzZXJ1cmwiLCJ2YWx1ZXVybCIsImluaXRpdGlhbGl6ZWQiLCJyZWFkeSIsIk1vZGVsIiwiVXNlciIsImhyZWYiLCJJc0Rlc2lnblRpbWUiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOYW1lIiwiZGVmYXVsdFZhbHVlIiwiYXR0cmlidXRlcyIsInhociIsInJlcXVlc3QiLCJvYyIsImdldE91dGNvbWVCeUlkIiwibWFwRWxlbWVudEludm9rZVJlcXVlc3QiLCJzZWxlY3RlZE91dGNvbWVJZCIsIm9jdCIsImV2ZW50TWFuYWdlciIsIm91dGNvbWVCZWluZ1RyaWdnZXJlZCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInN0cmlwcGVkIiwicmVwbGFjZSIsInZhbCIsInJlc3VsdCIsInN0cmlwcGVkQml0cyIsInNwbGl0IiwiZmllbGRzIiwibG9hZFZhbHVlIiwiY29uc29sZSIsImxvZyIsImVsZSIsImF0dHIiLCJuYW1lIiwiY2xvc2UiLCJ0YXJnZXRVcmwiLCJBdXRvT3BlblVybCIsIm9wZW4iLCJhbGVydCIsIkF1dG9OYXZVcmwiLCJwcmludCIsImNvbXBvbmVudERpZE1vdW50IiwibW91bnRpbmciLCJhZGREb25lTGlzdGVuZXIiLCJjb21wb25lbnRJZCIsImFkZEJlZm9yZVNlbmRMaXN0ZW5lciIsImZsb3dNb2RlbCIsIm1vZGVsIiwiZ2V0Q29tcG9uZW50IiwiZmxvd1N0YXRlIiwic3RhdGUiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJsaXN0RGF0YSIsIm1vdW50ZWQiLCJyZW1vdmVMb2FkaW5nSW5kaWNhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUJlZm9yZVNlbmRMaXN0ZW5lciIsInJlbW92ZURvbmVMaXN0ZW5lciIsImxvYWRPdXRjb21lIiwib3V0Y29tZUlkIiwib3V0Y29tZSIsImdldE91dGNvbWUiLCJGbG93T3V0Y29tZSIsIm91dHMiLCJnZXRPdXRjb21lcyIsIm91dGNvbWVzIiwiYXR0cnMiLCJGbG93QXR0cmlidXRlIiwiZGF0YVNvdXJjZSIsImRpc3BsYXlDb2x1bW5zIiwiZW5hYmxlZCIsImlzRW5hYmxlZCIsImhlaWdodCIsImhlbHBJbmZvIiwiaGludEluZm8iLCJoaW50VmFsdWUiLCJqb2luVXJpIiwiam9pblVSSSIsImxhYmVsIiwibWF4U2l6ZSIsIm11bHRpU2VsZWN0IiwiaXNNdWx0aVNlbGVjdCIsInJlYWRPbmx5IiwiaXNFZGl0YWJsZSIsInJlcXVpcmVkIiwiaXNSZXF1aXJlZCIsInNpemUiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsInZpc2libGUiLCJpc1Zpc2libGUiLCJ3aWR0aCIsImRzIiwiY29scyIsImNvbHVtbnMiLCJjb2wiLCJGbG93RGlzcGxheUNvbHVtbiIsInZhbHVlTmFtZSIsImxvYWRpbmciLCJjb25uZWN0aW9uIiwiZ2V0QXV0aGVudGljYXRpb25Ub2tlbiIsImdldFJlc3VsdEJvZHlUZXh0IiwicmVzcG9uc2UiLCJ0ZXh0IiwidGhlbiIsInN1YnN0ciIsImNhbGxSZXF1ZXN0IiwibWV0aG9kIiwiYXV0aGVudGljYXRpb25Ub2tlbiIsInJlc3VsdHMiLCJoZWFkZXJzIiwidGVuYW50SWQiLCJjcmVkZW50aWFscyIsImJvZHkiLCJmZXRjaCIsInN0YXR1cyIsImpzb24iLCJlcnJvclRleHQiLCJjYWxsUmVxdWVzdE9sZCIsIm1hcCIsInVzZXJ2YWwiLCJ1IiwiZGlyZWN0b3J5SWQiLCJkaXJlY3RvcnlOYW1lIiwiZW1haWwiLCJmaXJzdE5hbWUiLCJncm91cElkIiwiZ3JvdXBOYW1lIiwiaXBBZGRyZXNzIiwibGFuZ3VhZ2UiLCJsYXN0TmFtZSIsInJvbGVJZCIsInJvbGVOYW1lIiwidXNlck5hbWUiLCJpZ25vcmVTdGF0ZSIsIm9sZFN0YXRlIiwibG9hZGluZ1N0YXRlIiwic2F2aW5nIiwibmV3U3RhdGUiLCJzZXRDb21wb25lbnQiLCJvYmplY3REYXRhQXJyYXkiLCJ0b0lTT1N0cmluZyIsImNvbGxhYm9yYXRpb24iLCJpc0luaXRpYWxpemVkIiwiZXZlbnRIYW5kbGVkIiwidmFsdWVzIiwidXBkYXRlRmllbGRzIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwib3V0Y29tZU5hbWUiLCJtb3ZpbmciLCJpRmxvd091dGNvbWUiLCJjb21wb25lbnQiLCJvbk91dGNvbWUiLCJtb3ZlVG8iLCJmbG93RWxlbWVudElkIiwibm93IiwidGltZXN0YW1wIiwiZ2V0SG91cnMiLCJzbGljZSIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiam9pbiIsImxhdW5jaEZsb3dTaWxlbnQiLCJ0ZW5hbnQiLCJmbG93SWQiLCJwbGF5ZXIiLCJpbnB1dHMiLCJsYXVuY2hGbG93VGFiIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiYWN0aW9uIiwidG9VcHBlckNhc2UiLCJtc2ciLCJoYW5kbGVNZXNzYWdlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJGbG93QmFzZUNvbXBvbmVudCIsImV4cG9ydHMiLCJOYW1lIiwiY29sdW1uIiwiQ29sdW1uIiwiQ29tcG9uZW50VHlwZSIsImNvbXBvbmVudFR5cGUiLCJDb250ZW50Rm9ybWF0IiwiY29udGVudEZvcm1hdCIsIkRpc3BsYXlPcmRlciIsIkxhYmVsIiwiUmVhZE9ubHkiLCJUeXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQiLCJ0eXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQiLCJWaXNpYmxlIiwiaXNEaXNwbGF5VmFsdWUiLCJpRmxvd0Rpc3BsYXlDb2x1bW4iLCJjdiIsIm9iamQiLCJkIiwiaXNOYU4iLCJkdCIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZSIsImVQYWdlQWN0aW9uVHlwZSIsIklkIiwiSXNCdWxrQWN0aW9uIiwiaXNCdWxrQWN0aW9uIiwiSXNPdXQiLCJpc091dCIsIlBhZ2VBY3Rpb25CaW5kaW5nVHlwZSIsInBhZ2VBY3Rpb25CaW5kaW5nVHlwZSIsIlBhZ2VBY3Rpb25UeXBlIiwicGFnZUFjdGlvblR5cGUiLCJQYWdlT2JqZWN0QmluZGluZ0lkIiwicGFnZU9iamVjdEJpbmRpbmdJZCIsIk91dGNvbWUiLCJGbG93Q29tcG9uZW50IiwiYmVmb3JlU2VuZExpc3RlbmVycyIsImRvbmVMaXN0ZW5lcnMiLCJmYWlsTGlzdGVuZXJzIiwiYmVmb3JlU2VuZCIsImRvbmUiLCJmYWlsIiwiaGFuZGxlciIsImFkZEZhaWxMaXN0ZW5lciIsInJlbW92ZUZhaWxMaXN0ZW5lciIsImluaXRpYWxpemUiLCJpbnZva2UiLCJGVU5DX0VSUk9SX1RFWFQiLCJOQU4iLCJzeW1ib2xUYWciLCJyZVRyaW0iLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNPY3RhbCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsIm9iamVjdFRvU3RyaW5nIiwidG9TdHJpbmciLCJuYXRpdmVNYXgiLCJNYXRoIiwibWF4IiwibmF0aXZlTWluIiwibWluIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsIm9wdGlvbnMiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJ0cmFpbGluZyIsIlR5cGVFcnJvciIsImludm9rZUZ1bmMiLCJ0aW1lIiwiYXJncyIsInRoaXNBcmciLCJhcHBseSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwic2V0VGltZW91dCIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiYXJndW1lbnRzIiwibGVhZGluZ0VkZ2UiLCJ0b051bWJlciIsImlzT2JqZWN0IiwiY2FuY2VsIiwiY2xlYXJUaW1lb3V0IiwiZmx1c2giLCJ0eXBlIiwiaXNPYmplY3RMaWtlIiwiaXNTeW1ib2wiLCJvdGhlciIsInZhbHVlT2YiLCJpc0JpbmFyeSIsInRlc3QiLCJnIiwiZSIsInJlbG9hZFZhbHVlcyIsImZvcmNlVXBkYXRlIiwiRmxvd1BhZ2UiLCJlRHJhZ0V2ZW50VHlwZSIsIm1vZGFsRGlhbG9nQnV0dG9uIiwic291cmNlRWxlbWVudCIsInRhcmdldEVsZW1lbnQiLCJtb3VzZVgiLCJtb3VzZVkiLCJtb3VzZU9mZnNldFgiLCJtb3VzZU9mZnNldFkiLCJzdGFydCIsImV2dCIsIkRyYWdFdmVudCIsImRyYWciLCJlbmQiLCJ0YXJnZXQiLCJkcmFnRXZlbnQiLCJ0b3AiLCJsZWZ0IiwiaGFuZGxlS2V5VXAiLCJoYW5kbGVPdXRzaWRlQ2xpY2siLCJvbkNsb3NlUmVxdWVzdCIsInN0b3BFdmVudEJ1YmJsZSIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicmV0dXJuVmFsdWUiLCJkaWFsb2ciLCJwYXJlbnRYQ2VudGVyIiwib2Zmc2V0UGFyZW50IiwiY2xpZW50V2lkdGgiLCJwYXJlbnRZQ2VudGVyIiwiY2xpZW50SGVpZ2h0IiwiZGlhbG9nWE9mZnNldCIsImRpYWxvZ1lPZmZzZXQiLCJjbGFzc0xpc3QiLCJhZGQiLCIyNyIsImtleUNvZGUiLCJjb250YWlucyIsInJlbmRlciIsInN0eWxlIiwiYnV0dG9ucyIsImJ1dHRvbiIsImNsYXNzTmFtZSIsInRpdGxlIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsInJlZiIsIm5vZGUiLCJkaXNwbGF5IiwiZmxleERpcmVjdGlvbiIsImZsZXhHcm93IiwibWFyZ2luTGVmdCIsImN1cnNvciIsImNvbG9yIiwibWFyZ2luUmlnaHQiLCJmb250U2l6ZSIsIm9uQ2xvc2UiLCJjaGlsZHJlbiIsIm1vdmVNZSIsImNsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRZIiwiY2xpZW50WCIsIk1vZGFsRGlhbG9nIiwiaWNvbnMiLCJzZWxlY3RlZEl0ZW0iLCJvbkNoYW5nZVZhbHVlIiwiYXN0ZXJpc2siLCJjb2RlIiwicGx1cyIsImV1cm8iLCJtaW51cyIsImNsb3VkIiwib25jaGFuZ2UiLCJpbm5lclRleHQiLCJvbkNoYW5nZSIsIm9wdCIsIm9uQ2xpY2siLCJyb2xlIl0sIm1hcHBpbmdzIjoiYUFDQSxTQUdBLGNBR0EsUUFDQSxvQkFHQSxZQUNBLElBQ0EsS0FDQSxZQVVBLE9BTkEsbUNBR0EsT0FHQSxVQUtBLE1BR0EsTUFHQSxvQkFDQSxVQUNBLDJCQUEyQ0EsWUFBWSxFQUFNQyxJQUFLQyxLQUtsRSxnQkFDQSxnREFDQSw0Q0FBeURDLE1BQU8sV0FFaEUsc0NBQWtEQSxPQUFPLEtBUXpELGtCQUVBLEdBREEsY0FDQSxhQUNBLHFEQUNBLDBCQUdBLEdBRkEsT0FDQSxtQ0FBMENILFlBQVksRUFBTUcsTUFBT0EsSUFDbkUsMkRBQWlILE9BQU9BLEVBQU1DLElBQVFDLEtBQUssS0FBTUQsSUFDakosVUFJQSxnQkFDQSxzQkFDQSxXQUE0QixPQUFPRSxFQUFnQixTQUNuRCxXQUFrQyxPQUFPQSxHQUV6QyxPQURBLGFBQ0EsR0FJQSxrQkFBdUQsT0FBT0MsT0FBT0MsVUFBVUMsZUFBZUMsS0FBS0MsRUFBUUMsSUFHM0csT0FJQSxTLGdGQ2xGQSxJQWVZQyxFQWZaLE9BQ0EsUUFjQSxTQUFZQSxHQUNSLHlCQUNBLHFDQUNBLHFDQUNBLHFDQUNBLHVDQUNBLGlDQUNBLHlDQUNBLHVDQUNBLHlDQUNBLDJDQVZKLENBQVlBLEVBQUEsRUFBQUEsZUFBQSxFQUFBQSxhQUFZLEtBYXhCLGlCQThDSSxXQUFZQyxHQUNSLEdBOUNJLEtBQUFDLFlBQTRCRixFQUFhRyxRQUN6QyxLQUFBQyxjQUF3QixHQUN4QixLQUFBQyx5QkFBbUMsR0FDbkMsS0FBQUMsY0FBd0IsR0FDeEIsS0FBQUMsaUNBQTJDLEdBQzNDLEtBQUFDLHNCQUFnQyxHQUNoQyxLQUFBQyxlQUF5QixHQXdDMUJSLEVBVUMsT0FSQVMsS0FBS1IsWUFBY0YsRUFBYUMsRUFBTVUsYUFDdENELEtBQUtOLGNBQWdCSCxFQUFNVyxjQUMzQkYsS0FBS0wseUJBQTJCSixFQUFNWSx5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Z0IsU0FBQSxTQUFTOUUsR0FDTHJhLEtBQUsyZSxhQUFldEUsRUFBRWlCLE9BQU84RCxVQUN6QnBmLEtBQUs4QyxNQUFNdWMsVUFDWHJmLEtBQUs4QyxNQUFNdWMsU0FBU3JmLEtBQUsyZSxjQUU3QjNlLEtBQUt1YSxlQWNULFlBQUF3QyxPQUFBLFdBSUksSUFKSixXQUVVakYsRUFBeUIsR0FFYixNQUFBOVksT0FBTzJELEtBQUszQyxLQUFLMGUsT0FBakIsZUFBeUIsQ0FBdEMsSUFBTVksRUFBRyxLQUNILEVBQU0sdUJBQXlCdGYsS0FBSzBlLE1BQU1ZLEdBQUtwVixLQUFPLG9CQUM1RDROLEVBQVE1VyxLQUFLLHNCQUFJcWUsUUFBUyxTQUFDbEYsR0FBTyxFQUFLOEUsU0FBUzlFLEtBQ2pDLHdCQUFNOEMsVUFBVyxJQUNoQm5kLEtBQUswZSxNQUFNWSxHQUFLcFYsT0FJckMsT0FDSSx1QkFBS2lULFVBQVUsYUFDWCwwQkFBUXRELEtBQUssU0FBU3NELFVBQVUsa0NBQWlDLGNBQWEsWUFDOUUsd0JBQU1BLFVBQVcsdUJBQXlCbmQsS0FBSzJlLGVBQXFCLHdCQUFNeEIsVUFBVSxXQUV4RixzQkFBSUEsVUFBVSxnQkFBZ0JxQyxLQUFLLFFBQzlCMUgsS0FVakIsRUFyREEsQ0FBd0M1RSxFQUFNQyxXIiwiZmlsZSI6IkZsb3dDb21wb25lbnRNb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA5KTtcbiIsImltcG9ydCB7Rmxvd09iamVjdERhdGEsIElGbG93T2JqZWN0RGF0YX0gZnJvbSAnLi9GbG93T2JqZWN0RGF0YSc7XHJcbmltcG9ydCB7Rmxvd09iamVjdERhdGFBcnJheX0gZnJvbSAnLi9GbG93T2JqZWN0RGF0YUFycmF5JztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZsb3dGaWVsZCB7XHJcbiAgICBjb250ZW50VHlwZTogc3RyaW5nO1xyXG4gICAgY29udGVudFZhbHVlOiBzdHJpbmc7XHJcbiAgICBkZXZlbG9wZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBvYmplY3REYXRhOiBJRmxvd09iamVjdERhdGFbXTtcclxuICAgIHR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZTogc3RyaW5nO1xyXG4gICAgdHlwZUVsZW1lbnRJZDogc3RyaW5nO1xyXG4gICAgdHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWU6IHN0cmluZztcclxuICAgIHR5cGVFbGVtZW50UHJvcGVydHlJZDogc3RyaW5nO1xyXG4gICAgdmFsdWVFbGVtZW50SWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGVudW0gZUNvbnRlbnRUeXBlIHtcclxuICAgIHVua25vd24sXHJcbiAgICBDb250ZW50U3RyaW5nLFxyXG4gICAgQ29udGVudE51bWJlcixcclxuICAgIENvbnRlbnRPYmplY3QsXHJcbiAgICBDb250ZW50Qm9vbGVhbixcclxuICAgIENvbnRlbnRMaXN0LFxyXG4gICAgQ29udGVudFBhc3N3b3JkLFxyXG4gICAgQ29udGVudENvbnRlbnQsXHJcbiAgICBDb250ZW50RGF0ZVRpbWUsXHJcbiAgICBDb250ZW50RW5jcnlwdGVkLFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRmxvd0ZpZWxkIHtcclxuICAgIHByaXZhdGUgQ29udGVudFR5cGU6IGVDb250ZW50VHlwZSA9IGVDb250ZW50VHlwZS51bmtub3duO1xyXG4gICAgcHJpdmF0ZSBEZXZlbG9wZXJOYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBUeXBlRWxlbWVudERldmVsb3Blck5hbWU6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBwcml2YXRlIFR5cGVFbGVtZW50SWQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBwcml2YXRlIFR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBUeXBlRWxlbWVudFByb3BlcnR5SWQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBwcml2YXRlIFZhbHVlRWxlbWVudElkOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBWYWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSB8IGJvb2xlYW4gfCBGbG93T2JqZWN0RGF0YSB8IEZsb3dPYmplY3REYXRhQXJyYXkgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgZ2V0IGNvbnRlbnRUeXBlKCk6IGVDb250ZW50VHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudFR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRldmVsb3Blck5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlRWxlbWVudERldmVsb3Blck5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHR5cGVFbGVtZW50SWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudElkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlRWxlbWVudFByb3BlcnR5SWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZhbHVlRWxlbWVudElkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVmFsdWVFbGVtZW50SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB8IG51bWJlciB8IERhdGUgfCBib29sZWFuIHwgRmxvd09iamVjdERhdGEgfCBGbG93T2JqZWN0RGF0YUFycmF5IHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5WYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgdmFsdWUodmFsdWU6IHN0cmluZyB8IG51bWJlciB8IERhdGUgfCBib29sZWFuIHwgRmxvd09iamVjdERhdGEgfCBGbG93T2JqZWN0RGF0YUFycmF5IHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5WYWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZpZWxkPzogSUZsb3dGaWVsZCkge1xyXG4gICAgICAgIGlmKGZpZWxkKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5Db250ZW50VHlwZSA9IGVDb250ZW50VHlwZVtmaWVsZC5jb250ZW50VHlwZSBhcyBrZXlvZiB0eXBlb2YgZUNvbnRlbnRUeXBlXTtcclxuICAgICAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gZmllbGQuZGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudERldmVsb3Blck5hbWUgPSBmaWVsZC50eXBlRWxlbWVudERldmVsb3Blck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRJZCA9IGZpZWxkLnR5cGVFbGVtZW50SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eURldmVsb3Blck5hbWUgPSBmaWVsZC50eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZTtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBmaWVsZC50eXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuVmFsdWVFbGVtZW50SWQgPSBmaWVsZC52YWx1ZUVsZW1lbnRJZDtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5Db250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZhbHVlID0gZmllbGQub2JqZWN0RGF0YSA/IG5ldyBGbG93T2JqZWN0RGF0YShmaWVsZC5vYmplY3REYXRhKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZhbHVlID0gZmllbGQub2JqZWN0RGF0YSAmJiBmaWVsZC5vYmplY3REYXRhWzBdID8gbmV3IEZsb3dPYmplY3REYXRhQXJyYXkoZmllbGQub2JqZWN0RGF0YSkgOiBuZXcgRmxvd09iamVjdERhdGFBcnJheShbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLlZhbHVlID0gZmllbGQuY29udGVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlGbG93RmllbGQoKTogSUZsb3dGaWVsZCB7XHJcbiAgICAgICAgbGV0IGNvbnRlbnRWYWx1ZTogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICBsZXQgb2JqZWN0RGF0YTogSUZsb3dPYmplY3REYXRhW10gPSBbXTtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZDogRmxvd09iamVjdERhdGEgPSB0aGlzLlZhbHVlIGFzIEZsb3dPYmplY3REYXRhO1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YS5wdXNoKG9kLmlPYmplY3REYXRhKCkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TGlzdDpcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9kYTogRmxvd09iamVjdERhdGFBcnJheSA9IHRoaXMuVmFsdWUgYXMgRmxvd09iamVjdERhdGFBcnJheTtcclxuICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBvZGEuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRWYWx1ZSA9IHRoaXMuVmFsdWU/IHRoaXMuVmFsdWUgYXMgc3RyaW5nIDogXCJcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb3V0cHV0OiBJRmxvd0ZpZWxkID0ge1xyXG4gICAgICAgICAgICBjb250ZW50VHlwZTogZUNvbnRlbnRUeXBlW3RoaXMuQ29udGVudFR5cGVdLFxyXG4gICAgICAgICAgICBjb250ZW50VmFsdWUsXHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IHRoaXMuRGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgb2JqZWN0RGF0YSxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnREZXZlbG9wZXJOYW1lOiB0aGlzLlR5cGVFbGVtZW50RGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRJZDogdGhpcy5UeXBlRWxlbWVudElkLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZTogdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5RGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRQcm9wZXJ0eUlkOiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCxcclxuICAgICAgICAgICAgdmFsdWVFbGVtZW50SWQ6ICB0aGlzLlZhbHVlRWxlbWVudElkLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gaW1wb3J0IHsgYW55LCBzdHJpbmcgfSBmcm9tICdwcm9wLXR5cGVzJztcclxuLy8gaW1wb3J0IHsgb2JqZWN0RGF0YUhhbmRsZXIgfSBmcm9tICcuLi91dGlscy9wcm94eSc7XHJcbmltcG9ydCB7ZUNvbnRlbnRUeXBlfSBmcm9tICcuL0Zsb3dGaWVsZCc7XHJcbmltcG9ydCB7IEZsb3dPYmplY3REYXRhUHJvcGVydHksIElGbG93T2JqZWN0RGF0YVByb3BlcnR5IH0gZnJvbSAnLi9GbG93T2JqZWN0RGF0YVByb3BlcnR5JztcclxuaW1wb3J0IHsgSU1hbnl3aG8sIElPYmplY3REYXRhfSBmcm9tICcuL2ludGVyZmFjZXMnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBtYW55d2hvOiBJTWFueXdobztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUZsb3dPYmplY3REYXRhIHtcclxuICAgIGRldmVsb3Blck5hbWU6IHN0cmluZztcclxuICAgIGV4dGVybmFsSWQ6IHN0cmluZztcclxuICAgIGludGVybmFsSWQ6IHN0cmluZztcclxuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XHJcbiAgICBvcmRlcjogbnVtYmVyO1xyXG4gICAgcHJvcGVydGllczogSUZsb3dPYmplY3REYXRhUHJvcGVydHlbXTtcclxuICAgIHR5cGVFbGVtZW50SWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZsb3dPYmplY3REYXRhIHtcclxuICAgIHByaXZhdGUgRGV2ZWxvcGVyTmFtZTogc3RyaW5nID0gXCJcIjtcclxuICAgIHByaXZhdGUgRXh0ZXJuYWxJZDogc3RyaW5nID0gXCJcIjtcclxuICAgIHByaXZhdGUgSW50ZXJuYWxJZDogc3RyaW5nID0gXCJcIjtcclxuICAgIHByaXZhdGUgSXNTZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBPcmRlcjogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgVHlwZUVsZW1lbnRJZDogc3RyaW5nID0gXCJcIjtcclxuICAgIHByaXZhdGUgUHJvcGVydGllczoge1trZXk6IHN0cmluZ106IEZsb3dPYmplY3REYXRhUHJvcGVydHl9ID0ge307XHJcblxyXG4gICAgZ2V0IGRldmVsb3Blck5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgfVxyXG4gICAgc2V0IGRldmVsb3Blck5hbWUoZGV2ZWxvcGVyTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gZGV2ZWxvcGVyTmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXh0ZXJuYWxJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkV4dGVybmFsSWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgZXh0ZXJuYWxJZChleHRlcm5hbElkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLkV4dGVybmFsSWQgPSBleHRlcm5hbElkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpbnRlcm5hbElkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSW50ZXJuYWxJZDtcclxuICAgIH1cclxuICAgIHNldCBpbnRlcm5hbElkKGludGVybmFsSWQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuSW50ZXJuYWxJZCA9IGludGVybmFsSWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzU2VsZWN0ZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSXNTZWxlY3RlZDtcclxuICAgIH1cclxuICAgIHNldCBpc1NlbGVjdGVkKGlzU2VsZWN0ZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLklzU2VsZWN0ZWQgPSBpc1NlbGVjdGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBvcmRlcigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLk9yZGVyO1xyXG4gICAgfVxyXG4gICAgc2V0IG9yZGVyKG9yZGVyOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLk9yZGVyID0gb3JkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHR5cGVFbGVtZW50SWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudElkO1xyXG4gICAgfVxyXG4gICAgc2V0IHR5cGVFbGVtZW50SWQodHlwZUVsZW1lbnRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gdHlwZUVsZW1lbnRJZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHJvcGVydGllcygpOiB7W2tleTogc3RyaW5nXTogRmxvd09iamVjdERhdGFQcm9wZXJ0eX0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlByb3BlcnRpZXM7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YT86IElGbG93T2JqZWN0RGF0YVtdKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YVswXSkge1xyXG4gICAgICAgICAgICBjb25zdCBvYmplY3REYXRhID0gZGF0YVswXTtcclxuICAgICAgICAgICAgdGhpcy5EZXZlbG9wZXJOYW1lID0gb2JqZWN0RGF0YS5kZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLkludGVybmFsSWQgPSBvYmplY3REYXRhLmludGVybmFsSWQ7XHJcbiAgICAgICAgICAgIHRoaXMuRXh0ZXJuYWxJZCA9IG9iamVjdERhdGEuZXh0ZXJuYWxJZDtcclxuICAgICAgICAgICAgdGhpcy5PcmRlciA9IG9iamVjdERhdGEub3JkZXI7XHJcbiAgICAgICAgICAgIHRoaXMuSXNTZWxlY3RlZCA9IG9iamVjdERhdGEuaXNTZWxlY3RlZDtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gb2JqZWN0RGF0YS50eXBlRWxlbWVudElkO1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBvYmplY3REYXRhLnByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuUHJvcGVydGllc1twcm9wZXJ0eS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T2JqZWN0RGF0YVByb3BlcnR5KHByb3BlcnR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbmV3SW5zdGFuY2UoZGV2ZWxvcGVyTmFtZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGE6IElGbG93T2JqZWN0RGF0YSA9IHtcclxuICAgICAgICAgICAgZGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgZXh0ZXJuYWxJZCA6IFwiXCIsXHJcbiAgICAgICAgICAgIGludGVybmFsSWQgOiBtYW55d2hvLnV0aWxzLmd1aWQoKSxcclxuICAgICAgICAgICAgaXNTZWxlY3RlZCA6IHRydWUsXHJcbiAgICAgICAgICAgIG9yZGVyOiAwLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzIDogW10sXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50SWQgOiBcIlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoW2RhdGFdKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRQcm9wZXJ0eShuZXdQcm9wZXJ0eTogRmxvd09iamVjdERhdGFQcm9wZXJ0eSkge1xyXG4gICAgICAgIHRoaXMuUHJvcGVydGllc1tuZXdQcm9wZXJ0eS5kZXZlbG9wZXJOYW1lXSA9IG5ld1Byb3BlcnR5O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVByb3BlcnR5KGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuUHJvcGVydGllc1trZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKG5ld1R5cGVOYW1lPzogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgY2xvbmU6IEZsb3dPYmplY3REYXRhID0gRmxvd09iamVjdERhdGEubmV3SW5zdGFuY2UobmV3VHlwZU5hbWUgfHwgdGhpcy5EZXZlbG9wZXJOYW1lKTtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BlcnRpZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1Byb3A6IEZsb3dPYmplY3REYXRhUHJvcGVydHkgPSB0aGlzLnByb3BlcnRpZXNba2V5XS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBjbG9uZS5wcm9wZXJ0aWVzW2tleV0gPSBuZXdQcm9wO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjbG9uZTtcclxuICAgIH1cclxuXHJcbiAgICBpT2JqZWN0RGF0YSgpIHtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvcHM6IElGbG93T2JqZWN0RGF0YVByb3BlcnR5W10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5wcm9wZXJ0aWVzKSkge1xyXG4gICAgICAgICAgICBwcm9wcy5wdXNoKHRoaXMucHJvcGVydGllc1trZXldLmlGbG93T2JqZWN0RGF0YVByb3BlcnR5KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgb2JqZWN0RGF0YTogSU9iamVjdERhdGEgPSB7XHJcbiAgICAgICAgICAgIGRldmVsb3Blck5hbWU6IHRoaXMuZGV2ZWxvcGVyTmFtZSxcclxuICAgICAgICAgICAgZXh0ZXJuYWxJZCA6IHRoaXMuZXh0ZXJuYWxJZCxcclxuICAgICAgICAgICAgaW50ZXJuYWxJZCA6IHRoaXMuaW50ZXJuYWxJZCxcclxuICAgICAgICAgICAgaXNTZWxlY3RlZCA6IHRoaXMuaXNTZWxlY3RlZCxcclxuICAgICAgICAgICAgb3JkZXIgOiB0aGlzLm9yZGVyLFxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wcyxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRJZDogdGhpcy5UeXBlRWxlbWVudElkXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iamVjdERhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgaUZsb3dPYmplY3REYXRhQXJyYXkoKTogSUZsb3dPYmplY3REYXRhW10ge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dDogSUZsb3dPYmplY3REYXRhW10gPSBbXTtcclxuICAgICAgICBvdXRwdXQucHVzaCh0aGlzLmlPYmplY3REYXRhKCkpO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7IHN0cmluZyB9IGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgeyBlQ29udGVudFR5cGUgfSBmcm9tICcuL0Zsb3dGaWVsZCc7XHJcbmltcG9ydCB7IEZsb3dPYmplY3REYXRhICwgSUZsb3dPYmplY3REYXRhfSBmcm9tICcuL0Zsb3dPYmplY3REYXRhJztcclxuaW1wb3J0IHsgRmxvd09iamVjdERhdGFQcm9wZXJ0eSB9IGZyb20gJy4vRmxvd09iamVjdERhdGFQcm9wZXJ0eSc7XHJcblxyXG5leHBvcnQgZW51bSBlU29ydE9yZGVyIHtcclxuICAgIGFzY2VuZGluZyxcclxuICAgIGRlc2NlbmRpbmcsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBGbG93T2JqZWN0RGF0YUFycmF5IHtcclxuXHJcbiAgICBwcml2YXRlIEl0ZW1zOiBGbG93T2JqZWN0RGF0YVtdO1xyXG5cclxuICAgIGdldCBpdGVtcygpOiBGbG93T2JqZWN0RGF0YVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5JdGVtcztcclxuICAgIH1cclxuXHJcbiAgICBzb3J0KG9yZGVyOiBlU29ydE9yZGVyLCBmaWVsZE5hbWU/OiBzdHJpbmcpOiBGbG93T2JqZWN0RGF0YVtdIHtcclxuXHJcbiAgICAgICAgaWYgKG9yZGVyID09PSBlU29ydE9yZGVyLmFzY2VuZGluZykge1xyXG4gICAgICAgICAgICBpZiAoZmllbGROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5JdGVtcy5zb3J0KChhLCBiKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWxBOiBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbEI6IGFueTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGEucHJvcGVydGllc1tmaWVsZE5hbWVdLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIGVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQSA9IHBhcnNlRmxvYXQoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUgYXMgc3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbEIgPSBwYXJzZUZsb2F0KGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlIGFzIHN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIGVDb250ZW50VHlwZS5Db250ZW50RGF0ZVRpbWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxBID0gbmV3IERhdGUoYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUgYXMgc3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbEIgPSBuZXcgRGF0ZShiLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQSA9IGEucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsQiA9IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgdmFsQSA8IHZhbEI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHZhbEEgPiB2YWxCOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkl0ZW1zLnNvcnQoKGEsIGIpID0+IGEub3JkZXIgLSBiLm9yZGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChmaWVsZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkl0ZW1zLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZihhICYmIGIgJiYgYS5wcm9wZXJ0aWVzICYmIGIucHJvcGVydGllcyAmJiBhLnByb3BlcnRpZXNbZmllbGROYW1lXSAmJiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYi5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0gJiYgYS5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUgJiYgYi5wcm9wZXJ0aWVzW2ZpZWxkTmFtZV0udmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihhLnByb3BlcnRpZXNbZmllbGROYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSA8IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBhLnByb3BlcnRpZXNbZmllbGROYW1lXS52YWx1ZSA+IGIucHJvcGVydGllc1tmaWVsZE5hbWVdLnZhbHVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuSXRlbXMuc29ydCgoYSwgYikgPT4gYS5vcmRlciAtIGIub3JkZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGFycmF5PzogSUZsb3dPYmplY3REYXRhW10pIHtcclxuICAgICAgICB0aGlzLkl0ZW1zID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFycmF5IHx8IFtdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuSXRlbXMucHVzaChuZXcgRmxvd09iamVjdERhdGEoW2l0ZW1dKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBhZGRJdGVtKGl0ZW06IEZsb3dPYmplY3REYXRhKSB7XHJcbiAgICAgICAgdGhpcy5JdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFySXRlbXMoKSB7XHJcbiAgICAgICAgdGhpcy5JdGVtcyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkgOiBGbG93T2JqZWN0RGF0YUFycmF5IHtcclxuICAgICAgICBjb25zdCBjbG9uZTogRmxvd09iamVjdERhdGFBcnJheSA9IG5ldyBGbG93T2JqZWN0RGF0YUFycmF5KCk7XHJcblxyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgob2JqOiBGbG93T2JqZWN0RGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBjbG9uZS5hZGRJdGVtKG9iai5jbG9uZSgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgaUZsb3dPYmplY3REYXRhQXJyYXkoKTogSUZsb3dPYmplY3REYXRhW10ge1xyXG4gICAgICAgIGNvbnN0IG91dHB1dDogSUZsb3dPYmplY3REYXRhW10gPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IG9kIG9mIHRoaXMuSXRlbXMpIHtcclxuICAgICAgICAgICAgb3V0cHV0LnB1c2gob2QuaU9iamVjdERhdGEoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXRlbVdpdGhQcm9wZXJ0eU5hbWUoZmluZFByb3BlcnR5OiBzdHJpbmcsIHdpdGhWYWx1ZTogYW55LCByZXR1cm5Qcm9wZXJ0eTogc3RyaW5nKTogRmxvd09iamVjdERhdGFQcm9wZXJ0eSB8IGFueSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuSXRlbXMpIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldICYmIGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlICAhPSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBjb21wYXJlVG8gPSB3aXRoVmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRTdHJpbmc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlIGFzIHN0cmluZykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gY29tcGFyZVRvLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBwYXJzZUZsb2F0KGNvbXBhcmVUby50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0ucHJvcGVydGllc1tyZXR1cm5Qcm9wZXJ0eV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SXRlbVdpdGhQcm9wZXJ0eVZhbHVlKGZpbmRQcm9wZXJ0eTogc3RyaW5nLCB3aXRoVmFsdWU6IGFueSk6IEZsb3dPYmplY3REYXRhIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5JdGVtcykge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0gJiYgaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXBhcmVUbyA9IHdpdGhWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50U3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gbmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gcGFyc2VGbG9hdChuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SW5kZXhPZkl0ZW1XaXRoUHJvcGVydHlWYWx1ZShmaW5kUHJvcGVydHk6IHN0cmluZywgd2l0aFZhbHVlOiBhbnkpOiBudW1iZXIge1xyXG4gICAgICAgIGZvciAobGV0IHBvczogbnVtYmVyID0gMDsgcG9zIDwgdGhpcy5pdGVtcy5sZW5ndGg7IHBvcysrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zW3Bvc107XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XSAmJiBpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS52YWx1ZSAgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXBhcmVUbyA9IHdpdGhWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLnByb3BlcnRpZXNbZmluZFByb3BlcnR5XS5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50U3RyaW5nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgYXMgc3RyaW5nKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gY29tcGFyZVRvLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRvID0gcGFyc2VGbG9hdChuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IG5ldyBTdHJpbmcoY29tcGFyZVRvKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gY29tcGFyZVRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlSXRlbVdpdGhQcm9wZXJ0eVZhbHVlKGZpbmRQcm9wZXJ0eTogc3RyaW5nLCB3aXRoVmFsdWU6IGFueSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IG1vZGlmaWVkQ291bnQ6IG51bWJlciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgcG9zOiBudW1iZXIgPSAwOyBwb3MgPCB0aGlzLml0ZW1zLmxlbmd0aDsgcG9zKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbXNbcG9zXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldICYmIGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IGl0ZW0ucHJvcGVydGllc1tmaW5kUHJvcGVydHldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb21wYXJlVG8gPSB3aXRoVmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5wcm9wZXJ0aWVzW2ZpbmRQcm9wZXJ0eV0uY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlIGFzIHN0cmluZykudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IGNvbXBhcmVUby50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVUbyA9IHBhcnNlRmxvYXQobmV3IFN0cmluZyhjb21wYXJlVG8pLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50Qm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlVG8gPSBuZXcgU3RyaW5nKGNvbXBhcmVUbykudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IGNvbXBhcmVUbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnNwbGljZShwb3MsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkQ291bnQrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb2RpZmllZENvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUl0ZW1BdEluZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBtb2RpZmllZENvdW50OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbXNbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluZGV4LDEpO1xyXG4gICAgICAgICAgICBtb2RpZmllZENvdW50PWluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbW9kaWZpZWRDb3VudDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnLi9FdmVudE1hbmFnZXInO1xyXG5pbXBvcnQgeyBGbG93QXR0cmlidXRlIH0gZnJvbSAnLi9GbG93QXR0cmlidXRlJztcclxuaW1wb3J0IHsgRmxvd0Rpc3BsYXlDb2x1bW4gfSBmcm9tICcuL0Zsb3dEaXNwbGF5Q29sdW1uJztcclxuaW1wb3J0IHsgRmxvd0ZpZWxkLCBJRmxvd0ZpZWxkLCBlQ29udGVudFR5cGUgfSBmcm9tICcuL0Zsb3dGaWVsZCc7XHJcbmltcG9ydCB7IEZsb3dPYmplY3REYXRhLCBJRmxvd09iamVjdERhdGF9IGZyb20gJy4vRmxvd09iamVjdERhdGEnO1xyXG5pbXBvcnQgeyBGbG93T2JqZWN0RGF0YUFycmF5IH0gZnJvbSAnLi9GbG93T2JqZWN0RGF0YUFycmF5JztcclxuaW1wb3J0IHsgRmxvd091dGNvbWUsIElGbG93T3V0Y29tZSB9IGZyb20gJy4vRmxvd091dGNvbWUnO1xyXG4vL2ltcG9ydCB7IElDb21wb25lbnRQcm9wcywgSU1hbnl3aG8sIElPYmplY3REYXRhIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuLy9pbXBvcnQgeyBJQ29tcG9uZW50VmFsdWUgfSBmcm9tICcuL2ludGVyZmFjZXMvc2VydmljZXMvc3RhdGUnO1xyXG4vL2ltcG9ydCB7dGhyb3R0bGV9IGZyb20gJ2xvZGFzaCc7XHJcbnZhciB0aHJvdHRsZSA9IHJlcXVpcmUoJ2xvZGFzaC50aHJvdHRsZScpO1xyXG5cclxuXHJcbmRlY2xhcmUgY29uc3QgbWFueXdobzogYW55O1xyXG5kZWNsYXJlIGNvbnN0ICQ6IEpRdWVyeVN0YXRpYztcclxuXHJcbmludGVyZmFjZSBJRmxvd1N0YXRlVmFsdWUge1xyXG4gICAgY29udGVudFR5cGU6IHN0cmluZztcclxuICAgIGNvbnRlbnRWYWx1ZTogc3RyaW5nO1xyXG4gICAgZGV2ZWxvcGVyTmFtZTogc3RyaW5nO1xyXG4gICAgb2JqZWN0RGF0YTogYW55W107XHJcbiAgICB0eXBlRWxlbWVudERldmVsb3Blck5hbWU6IHN0cmluZztcclxuICAgIHR5cGVFbGVtZW50SWQ6IHN0cmluZztcclxuICAgIHR5cGVFbGVtZW50UHJvcGVydHlEZXZlbG9wZXJOYW1lOiBzdHJpbmc7XHJcbiAgICB0eXBlRWxlbWVudFByb3BlcnR5SWQ6IHN0cmluZztcclxuICAgIHZhbHVlRWxlbWVudElkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBJRmxvd1VzZXIge1xyXG4gICAgZGlyZWN0b3J5SWQ6IHN0cmluZztcclxuICAgIGRpcmVjdG9yeU5hbWU6IHN0cmluZztcclxuICAgIGVtYWlsOiBzdHJpbmc7XHJcbiAgICBmaXJzdE5hbWU6IHN0cmluZztcclxuICAgIGdyb3VwSWQ6IHN0cmluZztcclxuICAgIGdyb3VwTmFtZTogc3RyaW5nO1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGlwQWRkcmVzczogc3RyaW5nO1xyXG4gICAgbGFuZ3VhZ2U6IHN0cmluZztcclxuICAgIGxhc3ROYW1lOiBzdHJpbmc7XHJcbiAgICBsb2NhdGlvbjogc3RyaW5nO1xyXG4gICAgcm9sZUlkOiBzdHJpbmc7XHJcbiAgICByb2xlTmFtZTogc3RyaW5nO1xyXG4gICAgc3RhdHVzOiBzdHJpbmc7XHJcbiAgICB1c2VyTmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgSUZsb3dNb2RlbCB7XHJcbiAgICBjb250ZW50VHlwZTogc3RyaW5nO1xyXG4gICAgZGF0YVNvdXJjZTogRmxvd09iamVjdERhdGFBcnJheTtcclxuICAgIGRldmVsb3Blck5hbWU6IHN0cmluZztcclxuICAgIGVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIGhlbHBJbmZvOiBzdHJpbmc7XHJcbiAgICBoaW50SW5mbzogc3RyaW5nO1xyXG4gICAgam9pblVyaTogc3RyaW5nO1xyXG4gICAgbGFiZWw6IHN0cmluZztcclxuICAgIG1heFNpemU6IG51bWJlcjtcclxuICAgIG11bHRpU2VsZWN0OiBib29sZWFuO1xyXG4gICAgcmVhZE9ubHk6IGJvb2xlYW47XHJcbiAgICByZXF1aXJlZDogYm9vbGVhbjtcclxuICAgIHNpemU6IG51bWJlcjtcclxuICAgIHZhbGlkYXRpb25NZXNzYWdlOiBzdHJpbmc7XHJcbiAgICB2aXNpYmxlOiBib29sZWFuO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGRpc3BsYXlDb2x1bW5zOiBGbG93RGlzcGxheUNvbHVtbltdO1xyXG59XHJcblxyXG4vKlxyXG5pZiAoIShtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyKSB7XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlciA9IHt9O1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVycyA9IHt9O1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVycyA9IHt9O1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVycyA9IHt9O1xyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkO1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmQgPSAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVycyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmUgPSAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVycyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmZhaWwgPSAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB7XHJcbiAgICAgICAgLy8obWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyOiBhbnkpID0+IGxpc3RlbmVyKHhociwgcmVxdWVzdCkpO1xyXG4gICAgICAgIGZvcihjb25zdCBrZXkgaW4gKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVycyApXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzW2tleV0oeGhyLCByZXF1ZXN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmFkZEJlZm9yZVNlbmRMaXN0ZW5lciA9IChoYW5kbGVyOiAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB2b2lkLCBjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZExpc3RlbmVyc1tjb21wb25lbnRJZF0gPSBoYW5kbGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5yZW1vdmVCZWZvcmVTZW5kTGlzdGVuZXIgPSAoY29tcG9uZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGRlbGV0ZSAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYWRkRG9uZUxpc3RlbmVyID0gKGhhbmRsZXI6ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBhbnkpID0+IHZvaWQsIGNvbXBvbmVudElkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzW2NvbXBvbmVudElkXSA9IGhhbmRsZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lciA9IChjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgZGVsZXRlIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnNbY29tcG9uZW50SWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGRGYWlsTGlzdGVuZXIgPSAoaGFuZGxlcjogKHhocjogWE1MSHR0cFJlcXVlc3QsIHJlcXVlc3Q6IGFueSkgPT4gdm9pZCwgY29tcG9uZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnNbY29tcG9uZW50SWRdID0gaGFuZGxlcjtcclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIucmVtb3ZlRmFpbExpc3RlbmVyID0gKGNvbXBvbmVudElkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBkZWxldGUgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVyc1tjb21wb25lbnRJZF07XHJcbiAgICB9O1xyXG5cclxuICAgIG1hbnl3aG8uc2V0dGluZ3MuaW5pdGlhbGl6ZShudWxsLCB7XHJcbiAgICAgICAgaW52b2tlOiB7XHJcbiAgICAgICAgICAgIGJlZm9yZVNlbmQ6IChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmQsXHJcbiAgICAgICAgICAgIGRvbmU6IChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmUsXHJcbiAgICAgICAgICAgIGZhaWw6IChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmZhaWwsXHJcbiAgICAgICAgfSxcclxuICAgIH0pO1xyXG59XHJcbiovXHJcblxyXG5leHBvcnQgZW51bSBlTG9hZGluZ1N0YXRlIHtcclxuICAgIHJlYWR5PTAsXHJcbiAgICBsb2FkaW5nPTEsXHJcbiAgICBzYXZpbmc9MixcclxuICAgIG1vdmluZz0zLFxyXG4gICAgaW5pdGl0aWFsaXppbmc9NCxcclxuICAgIGluaXRpdGlhbGl6ZWQ9NSxcclxuICAgIG1vdW50aW5nPTYsXHJcbiAgICBtb3VudGVkPTdcclxufVxyXG5cclxuLy9leHBvcnQgdHlwZSBlTG9hZGluZ1N0YXRlID0gXCJyZWFkeVwiIHwgXCJsb2FkaW5nXCIgfCBcInNhdmluZ1wiIHwgXCJtb3ZpbmdcIiB8IFwiaW5pdGl0aWFsaXppbmdcIiB8IFwiaW5pdGl0aWFsaXplZFwiIHwgXCJtb3VudGluZ1wiIHwgXCJtb3VudGVkXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEZsb3dCYXNlQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55LCBhbnk+IHtcclxuXHJcbiAgICB1cmw6IHN0cmluZztcclxuICAgIHVzZXJ1cmw6IHN0cmluZztcclxuICAgIHZhbHVldXJsOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIFVzZXI/OiBJRmxvd1VzZXI7XHJcbiAgICBwcml2YXRlIFRlbmFudElkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIFN0YXRlSWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgRmxvd0tleTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBDb21wb25lbnRJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBQYXJlbnRJZD86IHN0cmluZztcclxuICAgIHByaXZhdGUgRmllbGRzOiB7W2tleTogc3RyaW5nXTogRmxvd0ZpZWxkfSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBMb2FkaW5nU3RhdGU6IGVMb2FkaW5nU3RhdGU7XHJcbiAgICBwcml2YXRlIEF0dHJpYnV0ZXM6IHtba2V5OiBzdHJpbmddOiBGbG93QXR0cmlidXRlfSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBPdXRjb21lczoge1trZXk6IHN0cmluZ106IEZsb3dPdXRjb21lfSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBNb2RlbD86IElGbG93TW9kZWw7XHJcbiAgICBwcml2YXRlIElzRGVzaWduVGltZTogYm9vbGVhbjtcclxuXHJcbiAgICBnZXQgdGVuYW50SWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5UZW5hbnRJZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgc3RhdGVJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlN0YXRlSWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZsb3dLZXkoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5GbG93S2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb21wb25lbnRJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNvbXBvbmVudElkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwYXJlbnRJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlBhcmVudElkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc1JlYWR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmKHRoaXMuTG9hZGluZ1N0YXRlID09PSBlTG9hZGluZ1N0YXRlLnJlYWR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgbG9hZGluZ1N0YXRlKCk6IGVMb2FkaW5nU3RhdGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkxvYWRpbmdTdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgb3V0Y29tZXMoKToge1trZXk6IHN0cmluZ106IEZsb3dPdXRjb21lfSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuT3V0Y29tZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGF0dHJpYnV0ZXMoKToge1trZXk6IHN0cmluZ106IEZsb3dBdHRyaWJ1dGV9IHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5BdHRyaWJ1dGVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBmaWVsZHMoKToge1trZXk6IHN0cmluZ106IEZsb3dGaWVsZH0gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkZpZWxkcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kZWwoKTogSUZsb3dNb2RlbCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHVzZXIoKTogSUZsb3dVc2VyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Vc2VyO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBqb2luVVJJKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc0Rlc2lnblRpbWUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSXNEZXNpZ25UaW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdLnZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWUgfHwgJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuRmllbGRzID0ge307XHJcbiAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLmluaXRpdGlhbGl6aW5nO1xyXG4gICAgICAgIHRoaXMubG9hZFZhbHVlcyA9IHRoaXMubG9hZFZhbHVlcy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZG9udExvYWRWYWx1ZXMgPSB0aGlzLmRvbnRMb2FkVmFsdWVzLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWYWx1ZXMgPSB0aGlzLnVwZGF0ZVZhbHVlcy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMudHJpZ2dlck91dGNvbWUgPSB0aGlzLnRyaWdnZXJPdXRjb21lLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5Db21wb25lbnRJZCA9IHRoaXMucHJvcHMuaWQ7XHJcbiAgICAgICAgdGhpcy5QYXJlbnRJZCA9IHRoaXMucHJvcHMucGFyZW50SWQ7XHJcbiAgICAgICAgdGhpcy5GbG93S2V5ID0gdGhpcy5wcm9wcy5mbG93S2V5O1xyXG4gICAgICAgIHRoaXMuQXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIHRoaXMubG9hZE1vZGVsID0gdGhpcy5sb2FkTW9kZWwuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmxvYWRBdHRyaWJ1dGVzID0gdGhpcy5sb2FkQXR0cmlidXRlcy5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMubG9hZE91dGNvbWVzID0gdGhpcy5sb2FkT3V0Y29tZXMuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLnJlY2VpdmVNZXNzYWdlID0gdGhpcy5yZWNlaXZlTWVzc2FnZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZ2V0U3RhdGVWYWx1ZSA9IHRoaXMuZ2V0U3RhdGVWYWx1ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGVWYWx1ZSA9IHRoaXMuc2V0U3RhdGVWYWx1ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZ2V0U3RhdGVWYWx1ZVR5cGUgPSB0aGlzLmdldFN0YXRlVmFsdWVUeXBlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UgPSB0aGlzLnNlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25CZWZvcmVTZW5kID0gdGhpcy5vbkJlZm9yZVNlbmQuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLm9uRG9uZSA9IHRoaXMub25Eb25lLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVWYWx1ZSA9IHRoaXMuY2FsY3VsYXRlVmFsdWUuYmluZCh0aGlzKTtcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLnJlY2VpdmVNZXNzYWdlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZE1vZGVsKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkQXR0cmlidXRlcygpO1xyXG4gICAgICAgIHRoaXMubG9hZE91dGNvbWVzKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSBtYW55d2hvLnNldHRpbmdzLmdsb2JhbCgncGxhdGZvcm0udXJpJykgfHwgd2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fCAnaHR0cHM6Ly9mbG93Lm1hbnl3aG8uY29tJztcclxuICAgICAgICB0aGlzLlN0YXRlSWQgPSBtYW55d2hvLnV0aWxzLmV4dHJhY3RTdGF0ZUlkKHRoaXMucHJvcHMuZmxvd0tleSk7XHJcbiAgICAgICAgdGhpcy5UZW5hbnRJZCA9IG1hbnl3aG8udXRpbHMuZXh0cmFjdFRlbmFudElkKHRoaXMucHJvcHMuZmxvd0tleSk7XHJcblxyXG4gICAgICAgIHRoaXMudXJsID0gYCR7YmFzZVVybH0vYXBpL3J1bi8xL3N0YXRlLyR7dGhpcy5TdGF0ZUlkfS92YWx1ZXNgO1xyXG4gICAgICAgIHRoaXMudXNlcnVybCA9IGAke2Jhc2VVcmx9L2FwaS9ydW4vMS9zdGF0ZS8ke3RoaXMuU3RhdGVJZH0vdmFsdWVzLzAzZGM0MWRkLTFjNmItNGIzMy1iZjYxLWNiZDFkMDc3OGZmZmA7XHJcbiAgICAgICAgdGhpcy52YWx1ZXVybCA9IGAke2Jhc2VVcmx9L2FwaS9ydW4vMS9zdGF0ZS8ke3RoaXMuU3RhdGVJZH0vdmFsdWVzL25hbWVgO1xyXG5cclxuICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUuaW5pdGl0aWFsaXplZDtcclxuICAgIH1cclxuXHJcbiAgICBvbkJlZm9yZVNlbmQoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSB7XHJcbiAgICAgICAgaWYocmVxdWVzdClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9jOiBGbG93T3V0Y29tZSA9IHRoaXMuZ2V0T3V0Y29tZUJ5SWQocmVxdWVzdC5tYXBFbGVtZW50SW52b2tlUmVxdWVzdC5zZWxlY3RlZE91dGNvbWVJZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9jdDogRmxvd091dGNvbWUgPSAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQ7XHJcbiAgICAgICAgICAgIGlmKG9jKXtcclxuICAgICAgICAgICAgICAgIGlmKCFvY3QgfHwgb2N0LmlkICE9PSBvYy5pZClcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQgPSBvYztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIHRoaXMgdGFrZXMgYSBzdHJpbmcgY29udGFpbmluZyBlaXRoZXIgYSBsaXRlcmFsIHZhbHVlIG9yIHRoZSBuYW1lIG9mIGEgZmllbGQgc3Vycm91bmRlZCB3aXRoIHt7Li59fVxyXG4gICAgLy8gaWYgaXQncyBsaXRlcmFsIGl0IGp1c3QgcmV0dXJucyBvdGhlcndpc2UgaXQgZ2V0cyB0aGUgdmFsdWUuXHJcbiAgICAvLyBpdCBjYW4gZ28gZG93biBsZXZlbHMgbGlrZSB2YWwuYXR0cmlidXRlLnN1YnZhbCBldGNcclxuICAgIC8vIE5PVEU6IHRoZXJlJ3MgYSBnb29kIGNoYW5jZSB0aW1pbmcgd2lzZSB0aGF0IHRoZXJlIGFyZSBubyBmaWVsZHMgeWV0XHJcbiAgICAvLyBzbyB3ZSBqdXN0IHJldHVybiB2YWx1ZSBpZiBhbnkgZXJyb3JzIGFyZSBlbmNvdW50ZXJlZCBsaWtlIHZhbCA9PT0gbnVsbFxyXG4gICAgYXN5bmMgY2FsY3VsYXRlVmFsdWUoIHZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xyXG4gICAgICAgIC8vIGlzIGl0IHJlcGxhY2VhYmxlPyAgc3RhcnRzIGFuZCBlbmRzIHdpdGgge3t9fVxyXG4gICAgICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCd7eycpICYmIHZhbHVlLmVuZHNXaXRoKCd9fScpKSB7XHJcbiAgICAgICAgICAgIC8vIHZhbHVlIHBvaW50cyB0byBhIGZpZWxkLCBnZXQgaXQncyB2YWx1ZVxyXG4gICAgICAgICAgICBsZXQgc3RyaXBwZWQ6IHN0cmluZyA9IHZhbHVlLnJlcGxhY2UoJ3t7JywgJycpO1xyXG4gICAgICAgICAgICBzdHJpcHBlZCA9IHN0cmlwcGVkLnJlcGxhY2UoJ319JywgJycpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHZhbDogYW55O1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBzdHJpbmcgPSAnJztcclxuICAgICAgICAgICAgLy8gaXQgY291bGQgYmUgYSBzdWIgZmllbGQgd2l0aCBwYXJlbnQuY2hpbGRcclxuICAgICAgICAgICAgY29uc3Qgc3RyaXBwZWRCaXRzOiBzdHJpbmdbXSA9IHN0cmlwcGVkLnNwbGl0KCcuJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBsb29wIG92ZXIgYml0c1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwb3MgPSAwIDsgcG9zIDwgc3RyaXBwZWRCaXRzLmxlbmd0aCA7IHBvcysrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwb3MgMCB3aWxsIHNldCB2YWwgZm9yIGFueSBjaGlsZCBlbGVtZW50c1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLmZpZWxkc1tzdHJpcHBlZEJpdHNbcG9zXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkVmFsdWUoc3RyaXBwZWRCaXRzW3Bvc10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmZpZWxkc1tzdHJpcHBlZEJpdHNbcG9zXV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1RoZSBWYWx1ZSBbJyArIHN0cmlwcGVkQml0c1twb3NdICsgJ10gd2FzIG5vdCBmb3VuZCwgaGF2ZSB5b3UgaW5jbHVkZWQgaXQgaW4geW91ciBmbG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwuQ29udGVudFR5cGUgIT09IGVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0ICYmIHZhbC5Db250ZW50VHlwZSAhPT0gZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbC52YWx1ZSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpZCBiaXRzIDAgZ2V0IGEgdmFsP1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlID0gKHZhbC52YWx1ZSBhcyBGbG93T2JqZWN0RGF0YSkucHJvcGVydGllc1tzdHJpcHBlZEJpdHNbcG9zXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUuY29udGVudFR5cGUgPT09IGVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0IHx8IGVsZS5jb250ZW50VHlwZSA9PT0gZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gKHZhbC52YWx1ZSBhcyBGbG93T2JqZWN0RGF0YSkucHJvcGVydGllc1tzdHJpcHBlZEJpdHNbcG9zXV0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICh2YWwudmFsdWUgYXMgRmxvd09iamVjdERhdGEpLnByb3BlcnRpZXNbc3RyaXBwZWRCaXRzW3Bvc11dLnZhbHVlIGFzIHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkRvbmUoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSB7XHJcbiAgICAgICAgaWYoKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkICYmIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBvdXRjb21lOiBGbG93T3V0Y29tZSA9IChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZC5hdHRyaWJ1dGVzKS5mb3JFYWNoKGFzeW5jIChrZXk6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cjogRmxvd0F0dHJpYnV0ZSA9IChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLm91dGNvbWVCZWluZ1RyaWdnZXJlZC5hdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0VXJsOiBGbG93QXR0cmlidXRlO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1dG9jbG9zZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihhdHRyLnZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwidHJ1ZVwiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXV0b29wZW5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVybCA9IG91dGNvbWUuYXR0cmlidXRlcy5BdXRvT3BlblVybCB8fCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGFyZ2V0VXJsICYmIHRhcmdldFVybC52YWx1ZS5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1cmw6IHN0cmluZyA9IGF3YWl0IHRoaXMuY2FsY3VsYXRlVmFsdWUodGFyZ2V0VXJsLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd25kID0gd2luZG93Lm9wZW4odXJsLCBcIl9ibGFua1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIk5vICdBdXRvT3BlblVybCcgc3BlY2lmaWVkIGluIHRoZSBvdXRjb21lJ3MgYXR0cmlidXRlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXV0b25hdlwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhdXRvbW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0VXJsID0gb3V0Y29tZS5hdHRyaWJ1dGVzLkF1dG9OYXZVcmwgfHwgdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRhcmdldFVybCAmJiB0YXJnZXRVcmwudmFsdWUubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXJsOiBzdHJpbmcgPSBhd2FpdCB0aGlzLmNhbGN1bGF0ZVZhbHVlKHRhcmdldFVybC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHduZCA9IHdpbmRvdy5vcGVuKHVybCwgXCJfYmxhbmtcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJObyAnQXV0b05hdlVybCcgc3BlY2lmaWVkIGluIHRoZSBvdXRjb21lJ3MgYXR0cmlidXRlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYXV0b3ByaW50XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucHJpbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICAvL3R1cm4gb2YgbW92aW5nIGZsYWdcclxuICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIub3V0Y29tZUJlaW5nVHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHJcbiAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLm1vdW50aW5nO1xyXG4gICAgICAgIC8vYWRkIG91dGNvbWUgbWFuYWdlciBzdHVmZlxyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmFkZERvbmVMaXN0ZW5lcih0aGlzLm9uRG9uZSx0aGlzLmNvbXBvbmVudElkICsgXCJfY29yZVwiKTtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGRCZWZvcmVTZW5kTGlzdGVuZXIodGhpcy5vbkJlZm9yZVNlbmQsdGhpcy5jb21wb25lbnRJZCArIFwiX2NvcmVcIik7XHJcblxyXG4gICAgICAgIC8vIHByZXNlcnZlIHN0YXRlXHJcbiAgICAgICAgY29uc3QgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCwgdGhpcy5GbG93S2V5KTtcclxuICAgICAgICBjb25zdCBmbG93U3RhdGUgPSBtYW55d2hvLnN0YXRlLmdldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCB0aGlzLmZsb3dLZXkpIHx8IHt9O1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGZsb3dNb2RlbC5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdDb250ZW50T2JqZWN0JzpcclxuICAgICAgICAgICAgICAgIGxldCBvYmplY3REYXRhOiBhbnk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmxvd1N0YXRlLm9iamVjdERhdGEgJiYgZmxvd1N0YXRlLm9iamVjdERhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdERhdGEgPSBmbG93U3RhdGUub2JqZWN0RGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKG5ldyBGbG93T2JqZWN0RGF0YShvYmplY3REYXRhKSx0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICBvYmplY3REYXRhID0gZmxvd01vZGVsLm9iamVjdERhdGE7XHJcbiAgICAgICAgICAgICAgICAvL31cclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgbmV3U3RhdGUsIHRoaXMuZmxvd0tleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRMaXN0JzpcclxuICAgICAgICAgICAgICAgIGxldCBsaXN0RGF0YTogYW55O1xyXG4gICAgICAgICAgICAgICAgaWYgKGZsb3dTdGF0ZS5vYmplY3REYXRhICYmIGZsb3dTdGF0ZS5vYmplY3REYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0RGF0YSA9IGZsb3dTdGF0ZS5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShsaXN0RGF0YSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlVmFsdWUobmV3IEZsb3dPYmplY3REYXRhQXJyYXkobGlzdERhdGEpLHRydWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2Vsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgbGlzdERhdGEgPSBmbG93TW9kZWwub2JqZWN0RGF0YVxyXG4gICAgICAgICAgICAgICAgLy99XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL21hbnl3aG8uc3RhdGUuc2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIG5ld1N0YXRlLCB0aGlzLmZsb3dLZXksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVZhbHVlKGZsb3dNb2RlbC5jb250ZW50VmFsdWUsdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAvL2Zsb3dTdGF0ZS5jb250ZW50VmFsdWUgPSBmbG93TW9kZWwuY29udGVudFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubW91bnRlZDtcclxuICAgICAgICBtYW55d2hvLnV0aWxzLnJlbW92ZUxvYWRpbmdJbmRpY2F0b3IoJ2xvYWRlcicpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY29tcG9uZW50V2lsbFVubW91bnQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIucmVtb3ZlQmVmb3JlU2VuZExpc3RlbmVyKHRoaXMuY29tcG9uZW50SWQgKyBcIl9jb3JlXCIpO1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZURvbmVMaXN0ZW5lcih0aGlzLmNvbXBvbmVudElkICsgXCJfY29yZVwiKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZE91dGNvbWUob3V0Y29tZUlkOiBzdHJpbmcpIDogRmxvd091dGNvbWV7XHJcbiAgICAgICAgaWYob3V0Y29tZUlkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dGNvbWUgPSBtYW55d2hvLm1vZGVsLmdldE91dGNvbWUob3V0Y29tZUlkLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgICAgICBpZihvdXRjb21lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLk91dGNvbWVzW291dGNvbWUuZGV2ZWxvcGVyTmFtZV0gPSBuZXcgRmxvd091dGNvbWUob3V0Y29tZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5PdXRjb21lc1tvdXRjb21lLmRldmVsb3Blck5hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxvYWRPdXRjb21lcygpIHtcclxuXHJcbiAgICAgICAgdGhpcy5PdXRjb21lcyA9IHt9O1xyXG5cclxuICAgICAgICAvLyBhZGQgdGhlIG91dGNvbWVzIGZyb20gdGhpcyBjb21wb25lbnRcclxuICAgICAgICBsZXQgb3V0cyA9IG1hbnl3aG8ubW9kZWwuZ2V0T3V0Y29tZXModGhpcy5wcm9wcy5pZCwgdGhpcy5wcm9wcy5mbG93S2V5KTtcclxuICAgICAgICBmb3IgKGNvbnN0IG91dGNvbWUgb2Ygb3V0cykge1xyXG4gICAgICAgICAgICB0aGlzLk91dGNvbWVzW291dGNvbWUuZGV2ZWxvcGVyTmFtZV0gPSBuZXcgRmxvd091dGNvbWUob3V0Y29tZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFuZCB0aGUgb25lcyBmcm9tIHRoZSBwYXJlbnQgcGFnZVxyXG4gICAgICAgIG91dHMgPSBtYW55d2hvLm1vZGVsLmdldE91dGNvbWVzKCcnLCB0aGlzLnByb3BzLmZsb3dLZXkpO1xyXG4gICAgICAgIGZvciAoY29uc3Qgb3V0Y29tZSBvZiBvdXRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuT3V0Y29tZXNbb3V0Y29tZS5kZXZlbG9wZXJOYW1lXSA9IG5ldyBGbG93T3V0Y29tZShvdXRjb21lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T3V0Y29tZUJ5SWQob3V0Y29tZUlkOiBzdHJpbmcpOiBGbG93T3V0Y29tZSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgbGV0IG9jO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMub3V0Y29tZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMub3V0Y29tZXNba2V5XS5pZCA9PT0gb3V0Y29tZUlkKSB7XHJcbiAgICAgICAgICAgICAgICBvYyA9IHRoaXMub3V0Y29tZXNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmKCFvYyl7XHJcbiAgICAgICAgICAgIG9jID0gdGhpcy5sb2FkT3V0Y29tZShvdXRjb21lSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2M7XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZEF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgY29uc3QgbW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIC8vIGFkZCB0aGUgYXR0cmlidXRlc1xyXG4gICAgICAgIGNvbnN0IGF0dHJzID0gbW9kZWwuYXR0cmlidXRlcztcclxuICAgICAgICBpZiAoYXR0cnMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoYXR0cnMpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkF0dHJpYnV0ZXNba2V5XSA9IG5ldyBGbG93QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9hZE1vZGVsKCkge1xyXG4gICAgICAgIGNvbnN0IG1vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCwgdGhpcy5GbG93S2V5KTtcclxuICAgICAgICBpZiAobW9kZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5Nb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBtb2RlbC5jb250ZW50VHlwZSxcclxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2U6ICBuZXcgRmxvd09iamVjdERhdGFBcnJheShbXSksXHJcbiAgICAgICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiBtb2RlbC5kZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheUNvbHVtbnM6IFtdLFxyXG4gICAgICAgICAgICAgICAgZW5hYmxlZDogIG1vZGVsLmlzRW5hYmxlZCxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogIG1vZGVsLmhlaWdodCxcclxuICAgICAgICAgICAgICAgIGhlbHBJbmZvOiAgbW9kZWwuaGVscEluZm8sXHJcbiAgICAgICAgICAgICAgICBoaW50SW5mbzogIG1vZGVsLmhpbnRWYWx1ZSxcclxuICAgICAgICAgICAgICAgIGpvaW5Vcmk6IHRoaXMuam9pblVSSSxcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAgbW9kZWwubGFiZWwsXHJcbiAgICAgICAgICAgICAgICBtYXhTaXplOiAgbW9kZWwubWF4U2l6ZSxcclxuICAgICAgICAgICAgICAgIG11bHRpU2VsZWN0OiAgbW9kZWwuaXNNdWx0aVNlbGVjdCxcclxuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiAgIW1vZGVsLmlzRWRpdGFibGUsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogIG1vZGVsLmlzUmVxdWlyZWQsXHJcbiAgICAgICAgICAgICAgICBzaXplOiAgbW9kZWwuc2l6ZSxcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiAgbW9kZWwudmFsaWRhdGlvbk1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiAgbW9kZWwuaXNWaXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IG1vZGVsLndpZHRoLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBkYXRhc291cmNlIHZhbHVlIG5hbWVcclxuICAgICAgICAgICAgY29uc3QgZHMgPSBtb2RlbC5vYmplY3REYXRhO1xyXG4gICAgICAgICAgICBpZiAoZHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2Qgb2YgZHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk1vZGVsLmRhdGFTb3VyY2UuYWRkSXRlbShuZXcgRmxvd09iamVjdERhdGEoW29kXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb2xzID0gbW9kZWwuY29sdW1ucztcclxuICAgICAgICAgICAgaWYgKGNvbHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29sIG9mIGNvbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLk1vZGVsLmRpc3BsYXlDb2x1bW5zLnB1c2gobmV3IEZsb3dEaXNwbGF5Q29sdW1uKGNvbCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGxvYWRWYWx1ZSh2YWx1ZU5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5sb2FkaW5nO1xyXG5cclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWU6IGFueSA9IG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIFwiXCIsIHRoaXMudmFsdWV1cmwgKyBcIi9cIiArIHZhbHVlTmFtZSAsICdHRVQnLCB0aGlzLlRlbmFudElkLCB0aGlzLlN0YXRlSWQsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLkZsb3dLZXkpLCB7fSk7XHJcbiAgICAgICAgaWYodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5GaWVsZHNbdmFsdWUuZGV2ZWxvcGVyTmFtZV0gPSBuZXcgRmxvd0ZpZWxkKHZhbHVlKTsgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBnZXRSZXN1bHRCb2R5VGV4dChyZXNwb25zZTogYW55KSA6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKVxyXG4gICAgICAgIC50aGVuKCh0ZXh0IDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIGlmKHRleHQuc3RhcnRzV2l0aChcIlxcXCJcIikpIHtcclxuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cigxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZih0ZXh0LmVuZHNXaXRoKFwiXFxcIlwiKSkge1xyXG4gICAgICAgICAgICAgICAgdGV4dCA9IHRleHQuc3Vic3RyKDAsIHRleHQubGVuZ3RoLTEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBhc3luYyBjYWxsUmVxdWVzdCh1cmw6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcsIGRhdGE6IGFueSwgYXV0aGVudGljYXRpb25Ub2tlbjogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICBjb25zdCByZXN1bHRzOiBhbnkgPSBbXTtcclxuICAgICAgICBjb25zdCByZXF1ZXN0OiBSZXF1ZXN0SW5pdCA9IHt9O1xyXG5cclxuICAgICAgICByZXF1ZXN0Lm1ldGhvZCA9IG1ldGhvZDsgIFxyXG4gICAgICAgIHJlcXVlc3QuaGVhZGVycyA9IHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBhdXRoZW50aWNhdGlvblRva2VuLFxyXG4gICAgICAgICAgICBcIk1hbnlXaG9UZW5hbnRcIjogdGhpcy50ZW5hbnRJZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVxdWVzdC5jcmVkZW50aWFscz0gXCJzYW1lLW9yaWdpblwiO1xyXG5cclxuICAgICAgICBpZihtZXRob2QgPT09IFwiUE9TVFwiIHx8IG1ldGhvZCA9PT0gXCJQVVRcIikge1xyXG4gICAgICAgICAgICByZXF1ZXN0LmJvZHkgPSBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgYXdhaXQgZmV0Y2godXJsLCByZXF1ZXN0KVxyXG4gICAgICAgIC50aGVuKGFzeW5jIChyZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGlmKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy5nZXRSZXN1bHRCb2R5VGV4dChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIEpTT04ucGFyc2UoanNvbikuZm9yRWFjaCgodmFsdWUgOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGVkIFZhbHVlc1wiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9lcnJvclxyXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgdGhpcy5nZXRSZXN1bHRCb2R5VGV4dChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbid0IGxvYWQgdmFsdWVzIC0gXCIgKyBlcnJvclRleHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjYWxsUmVxdWVzdE9sZCggdXJsOiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGxldCBvdXRwdXQ6IGFueTtcclxuICAgICAgICBjb25zdCB4aHIgPSBhd2FpdCBtYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBudWxsLCB1cmwgLCBtZXRob2QsIHRoaXMuVGVuYW50SWQsIHRoaXMuU3RhdGVJZCwgbWFueXdoby5zdGF0ZS5nZXRBdXRoZW50aWNhdGlvblRva2VuKHRoaXMuRmxvd0tleSksIG51bGwpXHJcblxyXG4gICAgICAgIHJldHVybiB4aHI7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbG9hZFZhbHVlcygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUubG9hZGluZztcclxuICAgICAgICB0aGlzLkZpZWxkcyA9IHt9XHJcbiAgICAgICAgY29uc3QgdmFsdWVzOiBhbnkgPSBhd2FpdCB0aGlzLmNhbGxSZXF1ZXN0T2xkKHRoaXMudXJsLCdHRVQnLHt9KTtcclxuXHJcbiAgICAgICAgKCh2YWx1ZXMgYXMgQXJyYXk8SUZsb3dTdGF0ZVZhbHVlPikgfHwgW10pLm1hcCgodmFsdWU6IElGbG93U3RhdGVWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBpZih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5GaWVsZHNbdmFsdWUuZGV2ZWxvcGVyTmFtZV0gPSBuZXcgRmxvd0ZpZWxkKHZhbHVlKTsgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgdXNlcnZhbCA9IGF3YWl0IHRoaXMuY2FsbFJlcXVlc3RPbGQodGhpcy51c2VydXJsLCdHRVQnLHt9KTtcclxuICAgICAgICAvL21hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIFwiXCIsIHRoaXMudXNlcnVybCAsICdHRVQnLCB0aGlzLlRlbmFudElkLCB0aGlzLlN0YXRlSWQsIG1hbnl3aG8uc3RhdGUuZ2V0QXV0aGVudGljYXRpb25Ub2tlbih0aGlzLkZsb3dLZXkpLCB7fSk7XHJcbiAgICAgICAgaWYodXNlcnZhbCkge1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gbmV3IEZsb3dGaWVsZCh1c2VydmFsKTtcclxuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSAodS52YWx1ZSBhcyBGbG93T2JqZWN0RGF0YSkucHJvcGVydGllcztcclxuICAgIFxyXG4gICAgICAgICAgICB0aGlzLlVzZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBkaXJlY3RvcnlJZDogcHJvcHNbJ0RpcmVjdG9yeSBJZCddLnZhbHVlIGFzIHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGRpcmVjdG9yeU5hbWU6IHByb3BzWydEaXJlY3RvcnkgTmFtZSddLnZhbHVlIGFzIHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGVtYWlsOiBwcm9wc1snRW1haWwnXS52YWx1ZSBhcyBzdHJpbmcgfHwgJ21hcmsnLFxyXG4gICAgICAgICAgICAgICAgZmlyc3ROYW1lOiBwcm9wc1snRmlyc3QgTmFtZSddLnZhbHVlIGFzIHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGdyb3VwSWQ6IHByb3BzWydQcmltYXJ5IEdyb3VwIElkJ10udmFsdWUgYXMgc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgZ3JvdXBOYW1lOiBwcm9wc1snUHJpbWFyeSBHcm91cCBOYW1lJ10udmFsdWUgYXMgc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgaWQ6IHByb3BzWydVc2VyIElEJ10udmFsdWUgYXMgc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgaXBBZGRyZXNzOiBwcm9wc1snSVAgQWRkcmVzcyddLnZhbHVlIGFzIHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBwcm9wc1snTGFuZ3VhZ2UnXS52YWx1ZSBhcyBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBsYXN0TmFtZTogcHJvcHNbJ0xhc3QgTmFtZSddLnZhbHVlIGFzIHN0cmluZyxcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBwcm9wc1snTG9jYXRpb24nXS52YWx1ZSBhcyBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICByb2xlSWQ6IHByb3BzWydSb2xlIElkJ10udmFsdWUgYXMgc3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgcm9sZU5hbWU6IHByb3BzWydSb2xlIE5hbWUnXS52YWx1ZSBhcyBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICBzdGF0dXM6IHByb3BzWydTdGF0dXMnXS52YWx1ZSBhcyBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgICB1c2VyTmFtZTogcHJvcHNbJ1VzZXJuYW1lJ10udmFsdWUgYXMgc3RyaW5nLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnJlYWR5O1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBkb250TG9hZFZhbHVlcygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IGVMb2FkaW5nU3RhdGUucmVhZHk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN0YXRlVmFsdWUoKTogc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlciB8IERhdGUgfCBGbG93T2JqZWN0RGF0YSB8IEZsb3dPYmplY3REYXRhQXJyYXkge1xyXG4gICAgICAgIGNvbnN0IGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcbiAgICAgICAgY29uc3QgZmxvd01vZGVsID0gbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCwgdGhpcy5GbG93S2V5KTtcclxuICAgICAgICBzd2l0Y2ggKGZsb3dNb2RlbC5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdDb250ZW50T2JqZWN0JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmxvd09iamVjdERhdGEoZmxvd1N0YXRlLm9iamVjdERhdGEgJiYgZmxvd1N0YXRlLm9iamVjdERhdGFbMF0/IGZsb3dTdGF0ZS5vYmplY3REYXRhWzBdIDogZmxvd01vZGVsLm9iamVjdERhdGFbMF0pO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAnQ29udGVudExpc3QnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG93T2JqZWN0RGF0YUFycmF5KGZsb3dTdGF0ZS5vYmplY3REYXRhPyBmbG93U3RhdGUub2JqZWN0RGF0YSA6IGZsb3dNb2RlbC5vYmplY3REYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBmbG93U3RhdGUuY29udGVudFZhbHVlPyBmbG93U3RhdGUuY29udGVudFZhbHVlIDogXCJcIjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRTdGF0ZVZhbHVlVHlwZSgpOiBzdHJpbmcgfCBib29sZWFuIHwgbnVtYmVyIHwgRGF0ZSB8IEZsb3dPYmplY3REYXRhIHwgRmxvd09iamVjdERhdGFBcnJheSB7XHJcbiAgICAgICAgY29uc3QgZmxvd1N0YXRlID0gbWFueXdoby5zdGF0ZS5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KSB8fCB7fTtcclxuICAgICAgICBjb25zdCBmbG93TW9kZWwgPSBtYW55d2hvLm1vZGVsLmdldENvbXBvbmVudCh0aGlzLkNvbXBvbmVudElkLCB0aGlzLkZsb3dLZXkpO1xyXG4gICAgICAgIHN3aXRjaCAoZmxvd01vZGVsLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ0NvbnRlbnRPYmplY3QnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGbG93T2JqZWN0RGF0YShmbG93U3RhdGUub2JqZWN0RGF0YSAmJiBmbG93U3RhdGUub2JqZWN0RGF0YVswXT8gZmxvd1N0YXRlLm9iamVjdERhdGFbMF0gOiBmbG93TW9kZWwub2JqZWN0RGF0YVswXSk7XHJcblxyXG4gICAgICAgICAgICBjYXNlICdDb250ZW50TGlzdCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZsb3dPYmplY3REYXRhQXJyYXkoZmxvd1N0YXRlLm9iamVjdERhdGE/IGZsb3dTdGF0ZS5vYmplY3REYXRhIDogZmxvd01vZGVsLm9iamVjdERhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZsb3dTdGF0ZS5jb250ZW50VmFsdWU/IGZsb3dTdGF0ZS5jb250ZW50VmFsdWUgOiBcIlwiIDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgc2V0U3RhdGVWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgYm9vbGVhbiB8IG51bWJlciB8IERhdGUgfCBGbG93T2JqZWN0RGF0YSB8IEZsb3dPYmplY3REYXRhQXJyYXksIGlnbm9yZVN0YXRlPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xyXG5cclxuICAgICAgICBpZih0aGlzLkxvYWRpbmdTdGF0ZSA9PT0gZUxvYWRpbmdTdGF0ZS5tb3VudGluZyB8fCB0aGlzLkxvYWRpbmdTdGF0ZSA9PT0gZUxvYWRpbmdTdGF0ZS5yZWFkeSkge1xyXG4gICAgICAgICAgICBsZXQgb2xkU3RhdGU6IGVMb2FkaW5nU3RhdGUgPSB0aGlzLmxvYWRpbmdTdGF0ZTtcclxuICAgICAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLnNhdmluZztcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZsb3dNb2RlbCA9IG1hbnl3aG8ubW9kZWwuZ2V0Q29tcG9uZW50KHRoaXMuQ29tcG9uZW50SWQsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZsb3dTdGF0ZSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgfHwge307XHJcbiAgICAgICAgICAgIGxldCBuZXdTdGF0ZTogYW55O1xyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHN3aXRjaCAoZmxvd01vZGVsLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50T2JqZWN0JzpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2JqZWN0RGF0YTogYW55ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gKHZhbHVlIGFzIEZsb3dPYmplY3REYXRhKS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1N0YXRlID0geyBcIm9iamVjdERhdGFcIjogb2JqZWN0RGF0YSB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbmV3U3RhdGUgPSB7IG9iamVjdERhdGEgfTtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50TGlzdCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9iamVjdERhdGFBcnJheTogYW55ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhQXJyYXkgPSAodmFsdWUgYXMgRmxvd09iamVjdERhdGFBcnJheSkuaUZsb3dPYmplY3REYXRhQXJyYXkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0RGF0YUFycmF5ID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmplY3REYXRhQXJyYXkpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB7IFwib2JqZWN0RGF0YVwiOiBvYmplY3REYXRhQXJyYXkgfTtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdDb250ZW50RGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB7IFwiY29udGVudFZhbHVlXCI6ICh2YWx1ZSBhcyBEYXRlKS50b0lTT1N0cmluZygpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgbmV3U3RhdGUsIHRoaXMuZmxvd0tleSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9mbG93U3RhdGUuY29udGVudFZhbHVlID0gKHZhbHVlIGFzIERhdGUpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHsgXCJjb250ZW50VmFsdWVcIjogdmFsdWUgfTtcclxuICAgICAgICAgICAgICAgICAgICBtYW55d2hvLnN0YXRlLnNldENvbXBvbmVudCh0aGlzLmNvbXBvbmVudElkLCBuZXdTdGF0ZSwgdGhpcy5mbG93S2V5LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2Zsb3dTdGF0ZS5jb250ZW50VmFsdWUgPSB2YWx1ZSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLkxvYWRpbmdTdGF0ZSA9IG9sZFN0YXRlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCx0aGlzLkZsb3dLZXkpLHRoaXMuRmxvd0tleSxudWxsKTtcclxuICAgICAgICAgICAgLy9hd2FpdCBtYW55d2hvLmVuZ2luZS5zeW5jKHRoaXMuZmxvd0tleSk7XHJcblxyXG4gICAgICAgICAgICBpZihtYW55d2hvLmNvbGxhYm9yYXRpb24uaXNJbml0aWFsaXplZCh0aGlzLmZsb3dLZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAvL21hbnl3aG8uY29sbGFib3JhdGlvbi5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgICAgICAvL3VwZGF0ZUZpZWxkcy5mb3JFYWNoKChmaWVsZDogSUZsb3dGaWVsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgbWFueXdoby5jb2xsYWJvcmF0aW9uLnB1c2godGhpcy5Db21wb25lbnRJZCx7XCJtZXNzYWdlXCI6IHtcImFjdGlvblwiOlwiUkVGUkVTSF9GSUVMRFwiLFwiZmllbGROYW1lXCI6IGZpZWxkLmRldmVsb3Blck5hbWUgfX0sdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgICAgIC8vfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCwgdGhpcy5mbG93S2V5KSx0aGlzLkZsb3dLZXksIHRoaXMuZXZlbnRIYW5kbGVkKTtcclxuICAgICAgICAgLy9tYW55d2hvLmVuZ2luZS5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBldmVudEhhbmRsZWQoYT86IGFueSwgYj86IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwicGluZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1cGRhdGVWYWx1ZXModmFsdWVzOiBGbG93RmllbGRbXSB8IEZsb3dGaWVsZCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5zYXZpbmc7XHJcbiAgICAgICAgLy90aGlzLmZvcmNlVXBkYXRlKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVwZGF0ZUZpZWxkczogSUZsb3dGaWVsZFtdID0gW107XHJcblxyXG4gICAgICAgIGlmKHZhbHVlcy5jb25zdHJ1Y3Rvci5uYW1lID09PSBGbG93RmllbGQubmFtZSkge1xyXG4gICAgICAgICAgICB1cGRhdGVGaWVsZHMucHVzaCgodmFsdWVzIGFzIEZsb3dGaWVsZCkuaUZsb3dGaWVsZCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiAodmFsdWVzIGFzIEFycmF5PEZsb3dGaWVsZD4pKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVGaWVsZHMucHVzaChmaWVsZC5pRmxvd0ZpZWxkKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG5cclxuICAgICAgICBhd2FpdCBtYW55d2hvLmNvbm5lY3Rpb24ucmVxdWVzdCh0aGlzLCBudWxsLCB0aGlzLnVybCAsICdQT1NUJywgdGhpcy5UZW5hbnRJZCwgdGhpcy5TdGF0ZUlkLCBtYW55d2hvLnN0YXRlLmdldEF1dGhlbnRpY2F0aW9uVG9rZW4odGhpcy5GbG93S2V5KSwgdXBkYXRlRmllbGRzKTtcclxuICAgICAgICAvL21hbnl3aG8uY29tcG9uZW50LmhhbmRsZUV2ZW50KHRoaXMsbWFueXdoby5tb2RlbC5nZXRDb21wb25lbnQodGhpcy5Db21wb25lbnRJZCx0aGlzLkZsb3dLZXkpLHRoaXMuRmxvd0tleSxudWxsKTtcclxuICAgICAgICAvL2F3YWl0IG1hbnl3aG8uZW5naW5lLnN5bmModGhpcy5mbG93S2V5KTtcclxuXHJcbiAgICAgICAgaWYobWFueXdoby5jb2xsYWJvcmF0aW9uLmlzSW5pdGlhbGl6ZWQodGhpcy5mbG93S2V5KSkge1xyXG4gICAgICAgICAgICAvL21hbnl3aG8uY29sbGFib3JhdGlvbi5zeW5jKHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgICAgIHVwZGF0ZUZpZWxkcy5mb3JFYWNoKChmaWVsZDogSUZsb3dGaWVsZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbWFueXdoby5jb2xsYWJvcmF0aW9uLnB1c2godGhpcy5Db21wb25lbnRJZCx7XCJtZXNzYWdlXCI6IHtcImFjdGlvblwiOlwiUkVGUkVTSF9GSUVMRFwiLFwiZmllbGROYW1lXCI6IGZpZWxkLmRldmVsb3Blck5hbWUgfX0sdGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5yZWFkeTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9zZW5kcyBhIGNvbGxhYm9yYXRpb24gbWVzc2FnZSBidXQgbGltaXRlZCB0byAxIGNhbGwgZXZlcnkgMTAwbXNcclxuICAgIHNlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSA9IHRocm90dGxlKHRoaXMuX3NlbmRDb2xsYWJvcmF0aW9uTWVzc2FnZSwgMTAwLCBudWxsKTtcclxuICAgIF9zZW5kQ29sbGFib3JhdGlvbk1lc3NhZ2UobWVzc2FnZTogYW55KXtcclxuICAgICAgICBpZihtYW55d2hvLmNvbGxhYm9yYXRpb24uaXNJbml0aWFsaXplZCh0aGlzLmZsb3dLZXkpKSB7XHJcbiAgICAgICAgICAgIC8vbWFueXdoby5jb2xsYWJvcmF0aW9uLnN5bmModGhpcy5mbG93S2V5KTtcclxuICAgICAgICAgICAgbWFueXdoby5jb2xsYWJvcmF0aW9uLnB1c2godGhpcy5Db21wb25lbnRJZCx7XCJtZXNzYWdlXCI6IG1lc3NhZ2V9LHRoaXMuZmxvd0tleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFxyXG4gICAgXHJcblxyXG4gICAgXHJcbiAgICAvL3RyaWdnZXJzIHRoZSBzcGVjaWZpZWQgb3V0Y29tZSwgb3B0aW9uYWxseSBwYXNzZXMgYSBkYXRhIG9iamVjdCBcclxuICAgIGFzeW5jIHRyaWdnZXJPdXRjb21lKG91dGNvbWVOYW1lOiBzdHJpbmcsIGRhdGE/OiBJRmxvd09iamVjdERhdGFbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMuTG9hZGluZ1N0YXRlID0gZUxvYWRpbmdTdGF0ZS5tb3Zpbmc7XHJcbiAgICAgICAgLy90aGlzLmZvcmNlVXBkYXRlKCk7XHJcblxyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgb2M6IGFueTtcclxuICAgICAgICBpZiAodGhpcy5vdXRjb21lc1tvdXRjb21lTmFtZV0pIHtcclxuICAgICAgICAgICAgb2MgPSB0aGlzLm91dGNvbWVzW291dGNvbWVOYW1lXS5pRmxvd091dGNvbWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYykge1xyXG4gICAgICAgICAgICBhd2FpdCBtYW55d2hvLmNvbXBvbmVudC5vbk91dGNvbWUob2MsIGRhdGEsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2coJ0NvdWxkIG5vdCBmaW5kIG91dGNvbWUgJyArIG91dGNvbWVOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vdHJpZ2dlcnMgdGhlIHNwZWNpZmllZCBvdXRjb21lLCBvcHRpb25hbGx5IHBhc3NlcyBhIGRhdGEgb2JqZWN0IFxyXG4gICAgYXN5bmMgbW92ZVRvKGZsb3dFbGVtZW50SWQ6IHN0cmluZywgZGF0YT86IElGbG93T2JqZWN0RGF0YVtdKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5Mb2FkaW5nU3RhdGUgPSBlTG9hZGluZ1N0YXRlLm1vdmluZztcclxuICAgICAgICAvL3RoaXMuZm9yY2VVcGRhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLypcclxuICAgICAgICBsZXQgb2M6IGFueTtcclxuICAgICAgICBpZiAodGhpcy5vdXRjb21lc1tvdXRjb21lTmFtZV0pIHtcclxuICAgICAgICAgICAgb2MgPSB0aGlzLm91dGNvbWVzW291dGNvbWVOYW1lXS5pRmxvd091dGNvbWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYykge1xyXG4gICAgICAgICAgICBhd2FpdCBtYW55d2hvLmNvbXBvbmVudC5vbk91dGNvbWUob2MsIGRhdGEsIHRoaXMuRmxvd0tleSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2coJ0NvdWxkIG5vdCBmaW5kIG91dGNvbWUgJyArIG91dGNvbWVOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbG9nKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgY29uc3QgdGltZSA9IFsoJzAnICsgbm93LmdldEhvdXJzKCkpLnNsaWNlKC0yKSwgKCcwJyArIG5vdy5nZXRNaW51dGVzKCkpLnNsaWNlKC0yKSxcclxuICAgICAgICAgICAgKCcwJyArIG5vdy5nZXRTZWNvbmRzKCkpLnNsaWNlKC0yKV07XHJcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gJ1snICsgdGltZS5qb2luKCc6JykgKyAnXSAnO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRpbWVzdGFtcCArIG1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vaGVscGVyIHRvIHNpbGVudGx5IGxhdW5jaCBhIGZsb3dcclxuICAgIGFzeW5jIGxhdW5jaEZsb3dTaWxlbnQodGVuYW50OiBzdHJpbmcsIGZsb3dJZDogc3RyaW5nLCBwbGF5ZXI6IHN0cmluZywgb2JqZWN0RGF0YT86IEZsb3dPYmplY3REYXRhQXJyYXkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBiYXNlVXJsID0gbWFueXdoby5zZXR0aW5ncy5nbG9iYWwoJ3BsYXRmb3JtLnVyaScpIHx8ICdodHRwczovL2Zsb3cubWFueXdoby5jb20nO1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGAke2Jhc2VVcmx9L2FwaS9ydW4vMS9zdGF0ZWA7XHJcblxyXG4gICAgICAgIGNvbnN0IGRhdGE6IGFueSA9IHt9O1xyXG4gICAgICAgIGRhdGEuaWQgPSBmbG93SWQ7XHJcbiAgICAgICAgZGF0YS5kZXZlbG9wZXJOYW1lID0gbnVsbDtcclxuICAgICAgICBkYXRhLmlucHV0cyA9IG9iamVjdERhdGEgPyBvYmplY3REYXRhLmlGbG93T2JqZWN0RGF0YUFycmF5KCkgOiBudWxsO1xyXG4gICAgICAgIG1hbnl3aG8uY29ubmVjdGlvbi5yZXF1ZXN0KHRoaXMsIFwiXCIsIHVybCAsICdQT1NUJywgdGhpcy5UZW5hbnRJZCwgXCJcIiwgbWFueXdoby5zdGF0ZS5nZXRBdXRoZW50aWNhdGlvblRva2VuKHRoaXMuRmxvd0tleSksIGRhdGEpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2hlbHBlciB0byBvcGVuIGEgc3BlY2lmaWMgZmxvdyBpbiBhIG5ldyB0YWJcclxuICAgIGFzeW5jIGxhdW5jaEZsb3dUYWIodGVuYW50OiBzdHJpbmcsIGZsb3dJZDogc3RyaW5nLCBwbGF5ZXI6IHN0cmluZywgb2JqZWN0RGF0YT86IEZsb3dPYmplY3REYXRhQXJyYXkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBiYXNlVXJsID0gbWFueXdoby5zZXR0aW5ncy5nbG9iYWwoJ3BsYXRmb3JtLnVyaScpIHx8ICdodHRwczovL2Zsb3cuYm9vbWkuY29tJztcclxuICAgICAgICBjb25zdCB1cmwgPSBiYXNlVXJsICsgJy8nICsgdGVuYW50ICsgJy9wbGF5LycgKyBwbGF5ZXIgKyAnP2Zsb3ctaWQ9JyArIGZsb3dJZDtcclxuXHJcbiAgICAgICAgd2luZG93Lm9wZW4odXJsLCAnX25ldycpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL3RoaXMgd2lsbCBnZXQgdHJpZ2dlcmVkIGJ5IHRoZSBjb2xsYWJvcmF0aW9uIGVuZ2luZVxyXG4gICAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGU6IGFueSA9IG1hbnl3aG8uc3RhdGUuZ2V0Q29tcG9uZW50KHRoaXMuY29tcG9uZW50SWQsIHRoaXMuZmxvd0tleSkgYXMgYW55O1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBzdGF0ZS5tZXNzYWdlO1xyXG4gICAgICAgIHRoaXMubG9hZE1vZGVsKCk7XHJcblxyXG4gICAgICAgIGlmKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgbWFueXdoby5zdGF0ZS5zZXRDb21wb25lbnQodGhpcy5jb21wb25lbnRJZCx7XCJtZXNzYWdlXCI6IHt9fSBhcyBhbnksIHRoaXMuZmxvd0tleSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyYmIHN0YXRlLm1lc3NhZ2UuYWN0aW9uID09PSBcIlJFTE9BRFZBTFVFU1wiXHJcbiAgICAgICAgaWYobWVzc2FnZSAmJiBtZXNzYWdlLmFjdGlvbiApIHtcclxuICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLmFjdGlvbi50b1VwcGVyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdSRUZSRVNIX0ZJRUxEUyc6XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkVmFsdWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1JFRlJFU0hfRklFTEQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZFZhbHVlKG1lc3NhZ2UuZmllbGROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgfVxyXG5cclxuICAgLy90aGlzIGlzIHVzZWQgYnkgb3RoZXIgY29tcG9uZW50cyB3aG8gbWlnaHQgd2FudCB0byBzZW5kIGluIGEgZ2VuZXJpYyB3aW5kb3cgbWVzc2FnZVxyXG4gICAvL25vdGhpbmcgdG8gZG8gd2l0aCBjb2xsYWJvcmF0aW9uXHJcbiAgICBhc3luYyByZWNlaXZlTWVzc2FnZShtZXNzYWdlOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBpZiAobWVzc2FnZS5kYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZzogYW55ID0gbWVzc2FnZS5kYXRhO1xyXG4gICAgICAgICAgICBpZiAobXNnLmFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChtc2cuYWN0aW9uLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdPVVRDT01FJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy50cmlnZ2VyT3V0Y29tZShtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JFRlJFU0hfRklFTERTJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZFZhbHVlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUkVGUkVTSF9GSUVMRCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMubG9hZFZhbHVlKG1zZy5maWVsZE5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5oYW5kbGVNZXNzYWdlKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBoYW5kbGVNZXNzYWdlKG1zZzogYW55KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyIsImV4cG9ydCBjbGFzcyBGbG93QXR0cmlidXRlIHtcclxuXHJcbiAgICBwcml2YXRlIE5hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgVmFsdWU6IHN0cmluZztcclxuXHJcbiAgICBnZXQgbmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLk5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5OYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLlZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgZUNvbnRlbnRUeXBlIH0gZnJvbSBcIi4vRmxvd0ZpZWxkXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGbG93RGlzcGxheUNvbHVtbiB7XHJcblxyXG4gICAgY29tcG9uZW50VHlwZTogc3RyaW5nO1xyXG4gICAgY29udGVudEZvcm1hdDogc3RyaW5nO1xyXG4gICAgY29udGVudFR5cGU6IHN0cmluZztcclxuICAgIGRldmVsb3Blck5hbWU6IHN0cmluZztcclxuICAgIGlzRGlzcGxheVZhbHVlOiBib29sZWFuO1xyXG4gICAgaXNFZGl0YWJsZTogYm9vbGVhbjtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBvcmRlcjogbnVtYmVyO1xyXG4gICAgdHlwZUVsZW1lbnRQcm9wZXJ0eUlkOiBzdHJpbmc7XHJcbiAgICB0eXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZsb3dEaXNwbGF5Q29sdW1uIHtcclxuICAgIHByaXZhdGUgQ29tcG9uZW50VHlwZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBDb250ZW50Rm9ybWF0OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIENvbnRlbnRUeXBlOiBlQ29udGVudFR5cGU7XHJcbiAgICBwcml2YXRlIERldmVsb3Blck5hbWU6IHN0cmluZztcclxuICAgIHByaXZhdGUgVmlzaWJsZTogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgUmVhZE9ubHk6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIExhYmVsOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIERpc3BsYXlPcmRlcjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBUeXBlRWxlbWVudFByb3BlcnR5SWQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgVHlwZUVsZW1lbXRQcm9wZXJ0eVRvRGlzcGxheUlkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIENvbHVtbjogSUZsb3dEaXNwbGF5Q29sdW1uO1xyXG5cclxuICAgIGdldCBjb21wb25lbnRUeXBlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQ29tcG9uZW50VHlwZTtcclxuICAgIH1cclxuICAgIGdldCBjb250ZW50Rm9ybWF0KCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQ29udGVudEZvcm1hdDtcclxuICAgIH1cclxuICAgIGdldCBjb250ZW50VHlwZSgpOiBlQ29udGVudFR5cGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNvbnRlbnRUeXBlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRldmVsb3Blck5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZpc2libGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVmlzaWJsZTtcclxuICAgIH1cclxuICAgIGdldCByZWFkT25seSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5SZWFkT25seTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGFiZWwoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5MYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZGlzcGxheU9yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRGlzcGxheU9yZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0eXBlRWxlbWVudFByb3BlcnR5SWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb2x1bW46IElGbG93RGlzcGxheUNvbHVtbikge1xyXG4gICAgICAgIHRoaXMuQ29sdW1uID0gY29sdW1uO1xyXG4gICAgICAgIHRoaXMuQ29tcG9uZW50VHlwZSA9IGNvbHVtbi5jb21wb25lbnRUeXBlO1xyXG4gICAgICAgIHRoaXMuQ29udGVudEZvcm1hdCA9IGNvbHVtbi5jb250ZW50Rm9ybWF0O1xyXG4gICAgICAgIHRoaXMuQ29udGVudFR5cGUgPSBlQ29udGVudFR5cGVbY29sdW1uLmNvbnRlbnRUeXBlIGFzIGtleW9mIHR5cGVvZiBlQ29udGVudFR5cGVdO1xyXG4gICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IGNvbHVtbi5kZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIHRoaXMuRGlzcGxheU9yZGVyID0gY29sdW1uLm9yZGVyO1xyXG4gICAgICAgIHRoaXMuTGFiZWwgPSBjb2x1bW4ubGFiZWw7XHJcbiAgICAgICAgdGhpcy5SZWFkT25seSA9ICFjb2x1bW4uaXNFZGl0YWJsZTtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW10UHJvcGVydHlUb0Rpc3BsYXlJZCA9IGNvbHVtbi50eXBlRWxlbWVtdFByb3BlcnR5VG9EaXNwbGF5SWQ7XHJcbiAgICAgICAgdGhpcy5UeXBlRWxlbWVudFByb3BlcnR5SWQgPSBjb2x1bW4udHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIHRoaXMuVmlzaWJsZSA9IGNvbHVtbi5pc0Rpc3BsYXlWYWx1ZTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaUZsb3dEaXNwbGF5Q29sdW1uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNvbHVtbjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBlQ29udGVudFR5cGUgfSBmcm9tICcuL0Zsb3dGaWVsZCc7XHJcbmltcG9ydCB7IEZsb3dPYmplY3REYXRhLCBJRmxvd09iamVjdERhdGEgfSBmcm9tICcuL0Zsb3dPYmplY3REYXRhJztcclxuaW1wb3J0IHsgRmxvd09iamVjdERhdGFBcnJheSB9IGZyb20gJy4vRmxvd09iamVjdERhdGFBcnJheSc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGbG93T2JqZWN0RGF0YVByb3BlcnR5IHtcclxuICAgIGNvbnRlbnRGb3JtYXQ6IHN0cmluZyB8IG51bGw7XHJcbiAgICBjb250ZW50VHlwZTogc3RyaW5nO1xyXG4gICAgY29udGVudFZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgbnVsbDtcclxuICAgIGRldmVsb3Blck5hbWU6IHN0cmluZztcclxuICAgIG9iamVjdERhdGE6IElGbG93T2JqZWN0RGF0YVtdIHwgbnVsbDtcclxuICAgIHR5cGVFbGVtZW50SWQ6IHN0cmluZyB8IG51bGw7XHJcbiAgICB0eXBlRWxlbWVudFByb3BlcnR5SWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZsb3dPYmplY3REYXRhUHJvcGVydHkge1xyXG5cclxuICAgIHN0YXRpYyBuZXdJbnN0YW5jZShkZXZlbG9wZXJOYW1lOiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBlQ29udGVudFR5cGUsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgRmxvd09iamVjdERhdGEgfCBGbG93T2JqZWN0RGF0YUFycmF5KSB7XHJcblxyXG4gICAgICAgIGxldCBjdjogc3RyaW5nID1cIlwiO1xyXG4gICAgICAgIGxldCBvYmpkOiBJRmxvd09iamVjdERhdGFbXSA9IFtdO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRPYmplY3Q6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZDogRmxvd09iamVjdERhdGEgPSB2YWx1ZSBhcyBGbG93T2JqZWN0RGF0YTtcclxuICAgICAgICAgICAgICAgIG9iamQucHVzaChvZC5pT2JqZWN0RGF0YSgpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudExpc3Q6XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvZGE6IEZsb3dPYmplY3REYXRhQXJyYXkgPSB2YWx1ZSBhcyBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG4gICAgICAgICAgICAgICAgb2JqZCA9IG9kYS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY3YgPSB2YWx1ZSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0YTogSUZsb3dPYmplY3REYXRhUHJvcGVydHkgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRGb3JtYXQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBlQ29udGVudFR5cGVbY29udGVudFR5cGVdLFxyXG4gICAgICAgICAgICBjb250ZW50VmFsdWU6IGN2LFxyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lLFxyXG4gICAgICAgICAgICBvYmplY3REYXRhOiBvYmpkLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudElkOiBcIlwiLFxyXG4gICAgICAgICAgICB0eXBlRWxlbWVudFByb3BlcnR5SWQ6IFwiXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBDb250ZW50Rm9ybWF0OiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBDb250ZW50VHlwZTogZUNvbnRlbnRUeXBlID0gZUNvbnRlbnRUeXBlLnVua25vd247XHJcbiAgICBwcml2YXRlIERldmVsb3Blck5hbWU6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBwcml2YXRlIFR5cGVFbGVtZW50SWQ6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBwcml2YXRlIFR5cGVFbGVtZW50UHJvcGVydHlJZDogc3RyaW5nPSBcIlwiO1xyXG4gICAgcHJpdmF0ZSBWYWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IEZsb3dPYmplY3REYXRhIHwgRmxvd09iamVjdERhdGFBcnJheSB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0eTogSUZsb3dPYmplY3REYXRhUHJvcGVydHkgfCB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZihwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBwcm9wZXJ0eS5kZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRUeXBlID0gZUNvbnRlbnRUeXBlW3Byb3BlcnR5LmNvbnRlbnRUeXBlIGFzIGtleW9mIHR5cGVvZiBlQ29udGVudFR5cGVdO1xyXG4gICAgICAgICAgICB0aGlzLkNvbnRlbnRGb3JtYXQgPSBwcm9wZXJ0eS5jb250ZW50Rm9ybWF0PyBwcm9wZXJ0eS5jb250ZW50Rm9ybWF0IDogXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5UeXBlRWxlbWVudElkID0gcHJvcGVydHkudHlwZUVsZW1lbnRJZD8gcHJvcGVydHkudHlwZUVsZW1lbnRJZCA6IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkID0gcHJvcGVydHkudHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLkNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50T2JqZWN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVmFsdWUgPSBwcm9wZXJ0eS5vYmplY3REYXRhID8gbmV3IEZsb3dPYmplY3REYXRhKHByb3BlcnR5Lm9iamVjdERhdGEpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBwcm9wZXJ0eS5vYmplY3REYXRhID8gbmV3IEZsb3dPYmplY3REYXRhQXJyYXkocHJvcGVydHkub2JqZWN0RGF0YSkgOiBuZXcgRmxvd09iamVjdERhdGFBcnJheShbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gcHJvcGVydHkuY29udGVudFZhbHVlPyBwcm9wZXJ0eS5jb250ZW50VmFsdWUgOiBcIlwiIDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29udGVudEZvcm1hdCgpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50Rm9ybWF0O1xyXG4gICAgICAgIH1cclxuICAgIHNldCBjb250ZW50Rm9ybWF0KGNvbnRlbnRGb3JtYXQ6IHN0cmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRGb3JtYXQgPSBjb250ZW50Rm9ybWF0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICBnZXQgY29udGVudFR5cGUoKTogZUNvbnRlbnRUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Db250ZW50VHlwZTtcclxuICAgICAgICB9XHJcbiAgICBzZXQgY29udGVudFR5cGUoY29udGVudFR5cGU6IGVDb250ZW50VHlwZSkge1xyXG4gICAgICAgIHRoaXMuQ29udGVudFR5cGUgPSBjb250ZW50VHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgZ2V0IGRldmVsb3Blck5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgICAgIH1cclxuICAgIHNldCBkZXZlbG9wZXJOYW1lKGRldmVsb3Blck5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuRGV2ZWxvcGVyTmFtZSA9IGRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIGdldCB0eXBlRWxlbWVudElkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRJZDtcclxuICAgICAgICB9XHJcbiAgICBzZXQgdHlwZUVsZW1lbnRJZCh0eXBlRWxlbWVudElkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50SWQgPSB0eXBlRWxlbWVudElkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICBnZXQgdHlwZUVsZW1lbnRQcm9wZXJ0eUlkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuVHlwZUVsZW1lbnRQcm9wZXJ0eUlkO1xyXG4gICAgICAgIH1cclxuICAgIHNldCB0eXBlRWxlbWVudFByb3BlcnR5SWQodHlwZUVsZW1lbnRQcm9wZXJ0eUlkOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCA9IHR5cGVFbGVtZW50UHJvcGVydHlJZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBGbG93T2JqZWN0RGF0YSB8IEZsb3dPYmplY3REYXRhQXJyYXkgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5jb250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIGVDb250ZW50VHlwZS5Db250ZW50TnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5WYWx1ZSA/IHRoaXMuVmFsdWUgYXMgc3RyaW5nIDogJzAnKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRCb29sZWFuOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJpbmcodGhpcy5WYWx1ZSkudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLlZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgRmxvd09iamVjdERhdGEgfCBGbG93T2JqZWN0RGF0YUFycmF5IHwgdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5WYWx1ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkgOiBGbG93T2JqZWN0RGF0YVByb3BlcnR5IHtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlOiBhbnk7XHJcbiAgICAgICAgc3dpdGNoKHRoaXMuY29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudExpc3Q6IFxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXcgRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgKHRoaXMudmFsdWUgYXMgRmxvd09iamVjdERhdGFBcnJheSkuaXRlbXMuZm9yRWFjaCgoaXRlbTogRmxvd09iamVjdERhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAodmFsdWUgYXMgRmxvd09iamVjdERhdGFBcnJheSkuYWRkSXRlbShpdGVtLmNsb25lKGl0ZW0uZGV2ZWxvcGVyTmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgIHZhbHVlPSh0aGlzLnZhbHVlIGFzIEZsb3dPYmplY3REYXRhKS5jbG9uZSgodGhpcy52YWx1ZSBhcyBGbG93T2JqZWN0RGF0YSkuZGV2ZWxvcGVyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNsb25lOiBGbG93T2JqZWN0RGF0YVByb3BlcnR5ID0gRmxvd09iamVjdERhdGFQcm9wZXJ0eS5uZXdJbnN0YW5jZSh0aGlzLmRldmVsb3Blck5hbWUsIHRoaXMuY29udGVudFR5cGUsIHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgaUZsb3dPYmplY3REYXRhUHJvcGVydHkoKTogSUZsb3dPYmplY3REYXRhUHJvcGVydHkge1xyXG5cclxuICAgICAgICBsZXQgY29udGVudFZhbHVlOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIGxldCBvYmplY3REYXRhOiBJRmxvd09iamVjdERhdGFbXSA9IFtdO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHRoaXMuQ29udGVudFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudE9iamVjdDpcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9kOiBGbG93T2JqZWN0RGF0YSA9IHRoaXMuVmFsdWUgYXMgRmxvd09iamVjdERhdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaGFzIG5vIGRldmVsb3Blck5hbWUgdGhlbiBza2lwIGl0XHJcbiAgICAgICAgICAgICAgICBpZiAob2QgJiYgb2QuZGV2ZWxvcGVyTmFtZSAmJiBvZC5kZXZlbG9wZXJOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmplY3REYXRhLnB1c2gob2QuaU9iamVjdERhdGEoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnRMaXN0OlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2RhOiBGbG93T2JqZWN0RGF0YUFycmF5ID0gdGhpcy5WYWx1ZSBhcyBGbG93T2JqZWN0RGF0YUFycmF5O1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0RGF0YSA9IG9kYS5pRmxvd09iamVjdERhdGFBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgY29udGVudFZhbHVlID0gdGhpcy5WYWx1ZSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG91dHB1dDogSUZsb3dPYmplY3REYXRhUHJvcGVydHkgPSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRGb3JtYXQ6IHRoaXMuQ29udGVudEZvcm1hdCxcclxuICAgICAgICAgICAgY29udGVudFR5cGU6IGVDb250ZW50VHlwZVt0aGlzLkNvbnRlbnRUeXBlXSxcclxuICAgICAgICAgICAgY29udGVudFZhbHVlLFxyXG4gICAgICAgICAgICBkZXZlbG9wZXJOYW1lOiB0aGlzLkRldmVsb3Blck5hbWUsXHJcbiAgICAgICAgICAgIG9iamVjdERhdGEsXHJcbiAgICAgICAgICAgIHR5cGVFbGVtZW50SWQ6IHRoaXMuVHlwZUVsZW1lbnRJZCxcclxuICAgICAgICAgICAgdHlwZUVsZW1lbnRQcm9wZXJ0eUlkOiB0aGlzLlR5cGVFbGVtZW50UHJvcGVydHlJZCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGdldCBkaXNwbGF5U3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IGxhYmVsOiBzdHJpbmcgPSAnJztcclxuICAgIFxyXG4gICAgICAgIGlmICh0aGlzLlZhbHVlKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5Db250ZW50VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudFN0cmluZzpcclxuICAgICAgICAgICAgICAgIGNhc2UgZUNvbnRlbnRUeXBlLkNvbnRlbnROdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSB0aGlzLlZhbHVlIGFzIHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudEJvb2xlYW46XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuVmFsdWUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnVHJ1ZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSAnRmFsc2UnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgY2FzZSBlQ29udGVudFR5cGUuQ29udGVudERhdGVUaW1lOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGQ6IG51bWJlciA9IERhdGUucGFyc2UodGhpcy5WYWx1ZSBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHQ6IERhdGUgPSBuZXcgRGF0ZShkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsLmxlbmd0aCA8PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR0LnRvTG9jYWxlRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR0LnRvTG9jYWxlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBlQ29udGVudFR5cGVbdGhpcy5Db250ZW50VHlwZV07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsYWJlbCA9ICdVbmRlZmluZWQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGFiZWw7XHJcbiAgICB9XHJcblxyXG59XHJcbiIsImltcG9ydCB7Rmxvd0F0dHJpYnV0ZX0gZnJvbSAnLi9GbG93QXR0cmlidXRlJztcclxuXHJcbmV4cG9ydCBlbnVtIGVQYWdlQWN0aW9uQmluZGluZ1R5cGUge1xyXG4gICAgU2F2ZSA9ICdTQVZFJyxcclxuICAgIFBhcnRpYWxTYXZlID0gJ1BBUlRJQUxfU0FWRScsXHJcbiAgICBOb1NhdmUgPSAnTk9fU0FWRScsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIGVQYWdlQWN0aW9uVHlwZSB7XHJcbiAgICBOZXcgPSAnTkVXJyxcclxuICAgIFF1ZXJ5ID0gJ1FVRVJZJyxcclxuICAgIEluc2VydCA9ICdJTlNFUlQnLFxyXG4gICAgVXBkYXRlID0gJ1VQREFURScsXHJcbiAgICBVcHNlcnQgPSAnVVBTRVJUJyxcclxuICAgIERlbGV0ZSA9ICdERUxFVEUnLFxyXG4gICAgUmVtb3ZlID0gJ1JFTU9WRScsXHJcbiAgICBBZGQgPSAnQUREJyxcclxuICAgIEVkaXQgPSAnRURJVCcsXHJcbiAgICBOZXh0ID0gJ05FWFQnLFxyXG4gICAgQmFjayA9ICdCQUNLJyxcclxuICAgIERvbmUgPSAnRE9ORScsXHJcbiAgICBTYXZlID0gJ1NBVkUnLFxyXG4gICAgQ2FuY2VsID0gJ0NBTkNFTCcsXHJcbiAgICBBcHBseSA9ICdBUFBMWScsXHJcbiAgICBJbXBvcnQgPSAnSU1QT1JUJyxcclxuICAgIENsb3NlID0gJ0NMT1NFJyxcclxuICAgIE9wZW4gPSAnT1BFTicsXHJcbiAgICBTdWJtaXQgPSAnU1VCTUlUJyxcclxuICAgIEVzY2FsYXRlID0gJ0VTQ0FMQVRFJyxcclxuICAgIFJlamVjdCA9ICdSRUpFQ1QnLFxyXG4gICAgRGVsZWdhdGUgPSAnREVMRUdBVEUnLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElGbG93T3V0Y29tZSB7XHJcbiAgICBhdHRyaWJ1dGVzOiBhbnk7XHJcbiAgICBkZXZlbG9wZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgaXNCdWxrQWN0aW9uOiBib29sZWFuO1xyXG4gICAgaXNPdXQ6IGJvb2xlYW47XHJcbiAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgb3JkZXI6IG51bWJlcjtcclxuICAgIHBhZ2VBY3Rpb25CaW5kaW5nVHlwZTogZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZTtcclxuICAgIHBhZ2VBY3Rpb25UeXBlOiBlUGFnZUFjdGlvblR5cGU7XHJcbiAgICBwYWdlT2JqZWN0QmluZGluZ0lkOiBzdHJpbmc7XHJcbn1cclxuZXhwb3J0IGNsYXNzIEZsb3dPdXRjb21lIHtcclxuICAgIHByaXZhdGUgQXR0cmlidXRlczoge1trZXk6IHN0cmluZ106IEZsb3dBdHRyaWJ1dGV9O1xyXG4gICAgcHJpdmF0ZSBEZXZlbG9wZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIElkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIElzQnVsa0FjdGlvbjogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgSXNPdXQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIExhYmVsOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIE9yZGVyOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIFBhZ2VBY3Rpb25CaW5kaW5nVHlwZTogZVBhZ2VBY3Rpb25CaW5kaW5nVHlwZTtcclxuICAgIHByaXZhdGUgUGFnZUFjdGlvblR5cGU6IGVQYWdlQWN0aW9uVHlwZTtcclxuICAgIHByaXZhdGUgUGFnZU9iamVjdEJpbmRpbmdJZDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBPdXRjb21lOiBJRmxvd091dGNvbWU7XHJcblxyXG4gICAgZ2V0IGRldmVsb3Blck5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5EZXZlbG9wZXJOYW1lO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlkKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuSWQ7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNCdWxrQWN0aW9uKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLklzQnVsa0FjdGlvbjtcclxuICAgIH1cclxuICAgIGdldCBpc091dCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5Jc091dDtcclxuICAgIH1cclxuICAgIGdldCBsYWJlbCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkxhYmVsO1xyXG4gICAgfVxyXG4gICAgZ2V0IG9yZGVyKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuT3JkZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhZ2VBY3Rpb25CaW5kaW5nVHlwZSgpOiBlUGFnZUFjdGlvbkJpbmRpbmdUeXBlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5QYWdlQWN0aW9uQmluZGluZ1R5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhZ2VBY3Rpb25UeXBlKCk6IGVQYWdlQWN0aW9uVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuUGFnZUFjdGlvblR5cGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBhZ2VPYmplY3RCaW5kaW5nSWQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5QYWdlT2JqZWN0QmluZGluZ0lkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBhdHRyaWJ1dGVzKCk6IHtba2V5OiBzdHJpbmddOiBGbG93QXR0cmlidXRlfSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQXR0cmlidXRlcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvdXRjb21lOiBJRmxvd091dGNvbWUpIHtcclxuICAgICAgICB0aGlzLkRldmVsb3Blck5hbWUgPSBvdXRjb21lLmRldmVsb3Blck5hbWU7XHJcbiAgICAgICAgdGhpcy5JZCA9IG91dGNvbWUuaWQ7XHJcbiAgICAgICAgdGhpcy5Jc0J1bGtBY3Rpb24gPSBvdXRjb21lLmlzQnVsa0FjdGlvbjtcclxuICAgICAgICB0aGlzLklzT3V0ID0gb3V0Y29tZS5pc091dDtcclxuICAgICAgICB0aGlzLkxhYmVsID0gb3V0Y29tZS5sYWJlbDtcclxuICAgICAgICB0aGlzLk9yZGVyID0gb3V0Y29tZS5vcmRlcjtcclxuICAgICAgICB0aGlzLlBhZ2VBY3Rpb25CaW5kaW5nVHlwZSA9IG91dGNvbWUucGFnZUFjdGlvbkJpbmRpbmdUeXBlO1xyXG4gICAgICAgIHRoaXMuUGFnZUFjdGlvblR5cGUgPSBvdXRjb21lLnBhZ2VBY3Rpb25UeXBlO1xyXG4gICAgICAgIHRoaXMuUGFnZU9iamVjdEJpbmRpbmdJZCA9IG91dGNvbWUucGFnZU9iamVjdEJpbmRpbmdJZDtcclxuICAgICAgICB0aGlzLkF0dHJpYnV0ZXMgPSB7fTtcclxuICAgICAgICBpZiAob3V0Y29tZS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG91dGNvbWUuYXR0cmlidXRlcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuQXR0cmlidXRlc1trZXldID0gbmV3IEZsb3dBdHRyaWJ1dGUoa2V5LCBvdXRjb21lLmF0dHJpYnV0ZXNba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuT3V0Y29tZSA9IG91dGNvbWU7XHJcbiAgICB9XHJcblxyXG4gICAgaUZsb3dPdXRjb21lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLk91dGNvbWU7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSAnLi9GbG93Q29tcG9uZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi9GbG93UGFnZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vTW9kYWxEaWFsb2cnO1xyXG5leHBvcnQgKiBmcm9tICcuL0ljb25QaWNrZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL0Zsb3dCYXNlQ29tcG9uZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi9GbG93QXR0cmlidXRlJztcclxuZXhwb3J0ICogZnJvbSAnLi9GbG93RGlzcGxheUNvbHVtbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vRmxvd0ZpZWxkJztcclxuZXhwb3J0ICogZnJvbSAnLi9GbG93T2JqZWN0RGF0YSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vRmxvd09iamVjdERhdGFBcnJheSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vRmxvd09iamVjdERhdGFQcm9wZXJ0eSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vRmxvd091dGNvbWUnO1xyXG5cclxuXHJcbiIsImltcG9ydCB7IEZsb3dCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9GbG93QmFzZUNvbXBvbmVudCc7XHJcbi8vaW1wb3J0IHsgIElNYW55d2hvIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcclxuXHJcbmRlY2xhcmUgY29uc3QgbWFueXdobzogYW55O1xyXG5kZWNsYXJlIGNvbnN0ICQ6IEpRdWVyeVN0YXRpYztcclxuXHJcbmV4cG9ydCBjbGFzcyBGbG93Q29tcG9uZW50IGV4dGVuZHMgRmxvd0Jhc2VDb21wb25lbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhlIEZsb3dQYWdlIGF1dG9tYXRpY2FsbHkgZ2V0cyB2YWx1ZXNcclxuICAgIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgICAgIGF3YWl0IHN1cGVyLmNvbXBvbmVudERpZE1vdW50KCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5kb250TG9hZFZhbHVlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcclxuICAgICAgICBhd2FpdCBzdXBlci5jb21wb25lbnREaWRVcGRhdGUoKTtcclxuICAgIH1cclxufVxyXG4iLCJkZWNsYXJlIGNvbnN0IG1hbnl3aG86IGFueTtcclxuXHJcbmlmICghKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIpIHtcclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyID0ge307XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzID0ge307XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzID0ge307XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzID0ge307XHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5vdXRjb21lQmVpbmdUcmlnZ2VyZWQ7XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZCA9ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBhbnkpID0+IHtcclxuICAgICAgICAvLyhtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXI6IGFueSkgPT4gbGlzdGVuZXIoeGhyLCByZXF1ZXN0KSk7XHJcbiAgICAgICAgZm9yKGNvbnN0IGtleSBpbiAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnNba2V5XSh4aHIsIHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZSA9ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBhbnkpID0+IHtcclxuICAgICAgICAvLyhtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXI6IGFueSkgPT4gbGlzdGVuZXIoeGhyLCByZXF1ZXN0KSk7XHJcbiAgICAgICAgZm9yKGNvbnN0IGtleSBpbiAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5kb25lTGlzdGVuZXJzIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnNba2V5XSh4aHIsIHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbCA9ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBhbnkpID0+IHtcclxuICAgICAgICAvLyhtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXI6IGFueSkgPT4gbGlzdGVuZXIoeGhyLCByZXF1ZXN0KSk7XHJcbiAgICAgICAgZm9yKGNvbnN0IGtleSBpbiAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzIClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmZhaWxMaXN0ZW5lcnNba2V5XSh4aHIsIHJlcXVlc3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYWRkQmVmb3JlU2VuZExpc3RlbmVyID0gKGhhbmRsZXI6ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBhbnkpID0+IHZvaWQsIGNvbXBvbmVudElkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5iZWZvcmVTZW5kTGlzdGVuZXJzW2NvbXBvbmVudElkXSA9IGhhbmRsZXI7XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLnJlbW92ZUJlZm9yZVNlbmRMaXN0ZW5lciA9IChjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgZGVsZXRlIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmJlZm9yZVNlbmRMaXN0ZW5lcnNbY29tcG9uZW50SWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5hZGREb25lTGlzdGVuZXIgPSAoaGFuZGxlcjogKHhocjogWE1MSHR0cFJlcXVlc3QsIHJlcXVlc3Q6IGFueSkgPT4gdm9pZCwgY29tcG9uZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmRvbmVMaXN0ZW5lcnNbY29tcG9uZW50SWRdID0gaGFuZGxlcjtcclxuICAgIH07XHJcblxyXG4gICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIucmVtb3ZlRG9uZUxpc3RlbmVyID0gKGNvbXBvbmVudElkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBkZWxldGUgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZUxpc3RlbmVyc1tjb21wb25lbnRJZF07XHJcbiAgICB9O1xyXG5cclxuICAgIChtYW55d2hvIGFzIGFueSkuZXZlbnRNYW5hZ2VyLmFkZEZhaWxMaXN0ZW5lciA9IChoYW5kbGVyOiAoeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogYW55KSA9PiB2b2lkLCBjb21wb25lbnRJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbExpc3RlbmVyc1tjb21wb25lbnRJZF0gPSBoYW5kbGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5yZW1vdmVGYWlsTGlzdGVuZXIgPSAoY29tcG9uZW50SWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGRlbGV0ZSAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5mYWlsTGlzdGVuZXJzW2NvbXBvbmVudElkXTtcclxuICAgIH07XHJcblxyXG4gICAgbWFueXdoby5zZXR0aW5ncy5pbml0aWFsaXplKG51bGwsIHtcclxuICAgICAgICBpbnZva2U6IHtcclxuICAgICAgICAgICAgYmVmb3JlU2VuZDogKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYmVmb3JlU2VuZCxcclxuICAgICAgICAgICAgZG9uZTogKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZG9uZSxcclxuICAgICAgICAgICAgZmFpbDogKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuZmFpbCxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydHt9OyIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgcmVzdWx0ID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZyA/IG5hdGl2ZU1pbihyZXN1bHQsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aHJvdHRsZTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImltcG9ydCB7IEZsb3dCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9GbG93QmFzZUNvbXBvbmVudCc7XHJcbmltcG9ydCB7IElGbG93T2JqZWN0RGF0YSB9IGZyb20gJy4vRmxvd09iamVjdERhdGEnO1xyXG4vL2ltcG9ydCB7ICBJTWFueXdobyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XHJcblxyXG5kZWNsYXJlIGNvbnN0IG1hbnl3aG86IGFueTtcclxuZGVjbGFyZSBjb25zdCAkOiBKUXVlcnlTdGF0aWM7XHJcblxyXG5leHBvcnQgY2xhc3MgRmxvd1BhZ2UgZXh0ZW5kcyBGbG93QmFzZUNvbXBvbmVudCB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnJlbG9hZFZhbHVlcyA9IHRoaXMucmVsb2FkVmFsdWVzLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGhlIEZsb3dQYWdlIGF1dG9tYXRpY2FsbHkgZ2V0cyB2YWx1ZXNcclxuICAgIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGF3YWl0IHN1cGVyLmNvbXBvbmVudERpZE1vdW50KCk7XHJcbiAgICAgICAgKG1hbnl3aG8gYXMgYW55KS5ldmVudE1hbmFnZXIuYWRkRG9uZUxpc3RlbmVyKHRoaXMucmVsb2FkVmFsdWVzLHRoaXMuY29tcG9uZW50SWQgKyBcIl9QR1wiKTtcclxuICAgICAgICAvL3NpbmNlIHdlIGFyZSBhIHBhZ2Ugd2Ugbm93IGxvYWQgYWxsIHZhbHVlc1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFZhbHVlcygpO1xyXG4gICAgICAgIC8vdGhpcy5mb3JjZVVwZGF0ZSgpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBjb21wb25lbnREaWRVcGRhdGUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgYXdhaXQgc3VwZXIuY29tcG9uZW50RGlkVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgY29tcG9uZW50V2lsbFVubW91bnQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgYXdhaXQgc3VwZXIuY29tcG9uZW50V2lsbFVubW91bnQoKTtcclxuICAgICAgICAobWFueXdobyBhcyBhbnkpLmV2ZW50TWFuYWdlci5yZW1vdmVEb25lTGlzdGVuZXIodGhpcy5jb21wb25lbnRJZCArIFwiX1BHXCIpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIC8vXHJcbiAgICBhc3luYyB0cmlnZ2VyT3V0Y29tZShvdXRjb21lTmFtZTogc3RyaW5nLCBkYXRhPzogSUZsb3dPYmplY3REYXRhW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBhd2FpdCBzdXBlci50cmlnZ2VyT3V0Y29tZShvdXRjb21lTmFtZSwgZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJlbG9hZFZhbHVlcyh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRNb2RlbCgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFZhbHVlcygpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0ICcuL2Nzcy9Nb2RhbERpYWxvZy5jc3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIG1vZGFsRGlhbG9nQnV0dG9uIHtcclxuICBsYWJlbDogc3RyaW5nO1xyXG4gIGhhbmRsZXI6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IobGFiZWw6IHN0cmluZywgaGFuZGxlcjogYW55KSB7XHJcbiAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGVudW0gZURyYWdFdmVudFR5cGVcclxue1xyXG4gICAgdW5rbm93bixcclxuICAgIGNhbnZhcyxcclxuICAgIHRhYmxlLFxyXG4gICAgbGluayxcclxuICAgIGRpYWxvZ1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRHJhZ0V2ZW50XHJcbntcclxuICAgIHR5cGU6IGVEcmFnRXZlbnRUeXBlO1xyXG4gICAgc291cmNlRWxlbWVudDogYW55O1xyXG4gICAgdGFyZ2V0RWxlbWVudDogYW55O1xyXG4gICAgbW91c2VYOiBudW1iZXI7XHJcbiAgICBtb3VzZVk6IG51bWJlcjtcclxuICAgIG1vdXNlT2Zmc2V0WDogbnVtYmVyO1xyXG4gICAgbW91c2VPZmZzZXRZOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMudHlwZSA9IGVEcmFnRXZlbnRUeXBlLnVua25vd247XHJcbiAgICAgICAgdGhpcy5zb3VyY2VFbGVtZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRhcmdldEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gMDtcclxuICAgICAgICB0aGlzLm1vdXNlWSA9IDA7XHJcbiAgICAgICAgdGhpcy5tb3VzZU9mZnNldFggPSAwO1xyXG4gICAgICAgIHRoaXMubW91c2VPZmZzZXRZID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHN0YXJ0KHR5cGU6IGVEcmFnRXZlbnRUeXBlLCBzb3VyY2VFbGVtZW50OiBhbnksIG1vdXNlWDogbnVtYmVyLCBtb3VzZVk6IG51bWJlcik6IERyYWdFdmVudFxyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGV2dDogRHJhZ0V2ZW50ID0gbmV3IERyYWdFdmVudCgpO1xyXG4gICAgICAgIGV2dC50eXBlID0gdHlwZTtcclxuICAgICAgICBldnQuc291cmNlRWxlbWVudCA9IHNvdXJjZUVsZW1lbnQ7XHJcbiAgICAgICAgZXZ0LnRhcmdldEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgIGV2dC5tb3VzZVggPSBtb3VzZVg7XHJcbiAgICAgICAgZXZ0Lm1vdXNlWSA9IG1vdXNlWTtcclxuICAgICAgICBldnQubW91c2VPZmZzZXRYID0gbW91c2VYO1xyXG4gICAgICAgIGV2dC5tb3VzZU9mZnNldFkgPSBtb3VzZVk7XHJcbiAgICAgICAgcmV0dXJuIGV2dDtcclxuICAgIH1cclxuXHJcbiAgICBkcmFnKG1vdXNlWDogbnVtYmVyLCBtb3VzZVk6IG51bWJlcilcclxuICAgIHtcclxuICAgICAgICB0aGlzLm1vdXNlWCA9IG1vdXNlWDtcclxuICAgICAgICB0aGlzLm1vdXNlWSA9IG1vdXNlWTtcclxuICAgIH1cclxuXHJcbiAgICBlbmQodGFyZ2V0OiBhbnksIG1vdXNlWDogbnVtYmVyLCBtb3VzZVk6IG51bWJlcikgOiBhbnlcclxuICAgIHtcclxuXHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50ID0gdGFyZ2V0O1xyXG4gICAgICAgIHRoaXMubW91c2VYID0gbW91c2VYO1xyXG4gICAgICAgIHRoaXMubW91c2VZID0gbW91c2VZO1xyXG5cclxuICAgICAgICB0aGlzLnR5cGU9ZURyYWdFdmVudFR5cGUudW5rbm93bjsgICAgICBcclxuICAgIH1cclxufVxyXG5cclxuLy8gRGVjbGFyYXRpb24gb2YgdGhlIGNvbXBvbmVudCBhcyBSZWFjdCBDbGFzcyBDb21wb25lbnRcclxuZXhwb3J0IGNsYXNzIE1vZGFsRGlhbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiB7XHJcbiAgICBkcmFnRXZlbnQ6IERyYWdFdmVudCA9IG5ldyBEcmFnRXZlbnQoKTtcclxuICAgIG1vZGFsOiBhbnk7XHJcbiAgICBkaWFsb2c6IGFueTtcclxuXHJcbiAgICB0b3A6IG51bWJlciA9IDA7XHJcbiAgICBsZWZ0OiBudW1iZXIgPSAwO1xyXG4gIC8vIEluaXQgb2YgdGhlIGNvbXBvbmVudCBiZWZvcmUgaXQgaXMgbW91bnRlZC5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgICAgIHRoaXMuaGFuZGxlS2V5VXAgPSB0aGlzLmhhbmRsZUtleVVwLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2sgPSB0aGlzLmhhbmRsZU91dHNpZGVDbGljay5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25DbG9zZVJlcXVlc3QgPSB0aGlzLm9uQ2xvc2VSZXF1ZXN0LmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcEV2ZW50QnViYmxlKGU6ICBhbnkpIHtcclxuICAgICAgICBpZihlLnN0b3BQcm9wYWdhdGlvbikgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBpZihlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5jYW5jZWxCdWJibGU9dHJ1ZTtcclxuICAgICAgICBlLnJldHVyblZhbHVlPWZhbHNlO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgLy8gQWRkIGxpc3RlbmVycyBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuXHJcbiAgICAgIC8vbmVlZCB0byBjZW50ZXIgdGhlIHdpbmRvd1xyXG4gICAgICBpZih0aGlzLmRpYWxvZykge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudFhDZW50ZXIgPSB0aGlzLmRpYWxvZy5vZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IHBhcmVudFlDZW50ZXIgPSB0aGlzLmRpYWxvZy5vZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IC8gMjtcclxuICAgICAgICBjb25zdCBkaWFsb2dYT2Zmc2V0ID0gdGhpcy5kaWFsb2cuY2xpZW50V2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZ1lPZmZzZXQgPSB0aGlzLmRpYWxvZy5jbGllbnRIZWlnaHQgLyAyO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gcGFyZW50WENlbnRlciAtIGRpYWxvZ1hPZmZzZXQ7XHJcbiAgICAgICAgdGhpcy50b3AgPSBwYXJlbnRZQ2VudGVyIC0gZGlhbG9nWU9mZnNldDtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgICAgdGhpcy5kaWFsb2cuY2xhc3NMaXN0LmFkZCgnc2hvd24nKTtcclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIC8vd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcCwgZmFsc2UpO1xyXG4gICAgLy9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlT3V0c2lkZUNsaWNrLCBmYWxzZSk7XHJcbiAgfVxyXG4gIFxyXG5cclxuICAvLyBSZW1vdmUgbGlzdGVuZXJzIGltbWVkaWF0ZWx5IGJlZm9yZSBhIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgYW5kIGRlc3Ryb3llZC5cclxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgLy93aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleVVwLCBmYWxzZSk7XHJcbiAgICAvL2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIG9uQ2xvc2VSZXF1ZXN0KCkge1xyXG4gICAgaWYodGhpcy5wcm9wcy5vbkNsb3NlUmVxdWVzdCkge1xyXG4gICAgICAvL2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVPdXRzaWRlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgLy93aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleVVwLCBmYWxzZSk7XHJcbiAgICAgIHRoaXMucHJvcHMub25DbG9zZVJlcXVlc3QoKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gSGFuZGxlIHRoZSBrZXkgcHJlc3MgZXZlbnQuXHJcbiAgaGFuZGxlS2V5VXAoZTogYW55KSB7XHJcbiAgICBjb25zdCBrZXlzOiBhbnkgPSB7XHJcbiAgICAgIDI3OiAoKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMub25DbG9zZVJlcXVlc3QoKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGtleXNbZS5rZXlDb2RlXSkgeyBcclxuICAgICAga2V5c1tlLmtleUNvZGVdKCk7IFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgXHJcblxyXG4gIC8vIEhhbmRsZSB0aGUgbW91c2UgY2xpY2sgb24gYnJvd3NlciB3aW5kb3cuXHJcbiAgaGFuZGxlT3V0c2lkZUNsaWNrKGU6IGFueSkge1xyXG4gICAgXHJcbiAgICAgaWYgKCF0aGlzLmRpYWxvZykge1xyXG4gICAgICAgIGlmICghdGhpcy5kaWFsb2cuY29udGFpbnMoZS50YXJnZXQpKSB7XHJcbiAgICAgICAgICB0aGlzLm9uQ2xvc2VSZXF1ZXN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgIH1cclxuICB9XHJcbiAgXHJcblxyXG4gIC8vIFJlbmRlciB0aGUgY29tcG9uZW50IHBhc3Npbmcgb25DbG9zZVJlcXVlc3QgYW5kIGNoaWxkcmVuIGFzIHByb3BzLlxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHN0eWxlOiBhbnkgPSB7fTtcclxuICAgIHN0eWxlLmxlZnQ9dGhpcy5sZWZ0O1xyXG4gICAgc3R5bGUudG9wID0gdGhpcy50b3A7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uczogQXJyYXk8SlNYLkVsZW1lbnQ+ID0gW107XHJcbiAgICBmb3IoY29uc3QgYnV0dG9uIG9mIHRoaXMucHJvcHMuYnV0dG9ucykge1xyXG4gICAgICBidXR0b25zLnB1c2goXHJcbiAgICAgIDxidXR0b24gXHJcbiAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nLWJ1dHRvbi1iYXItYnV0dG9uXCIgXHJcbiAgICAgICAgdGl0bGU9XCJDYW5jZWxcIiBcclxuICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHtlLnN0b3BQcm9wYWdhdGlvbigpO2J1dHRvbi5oYW5kbGVyKCl9fVxyXG4gICAgICA+XHJcbiAgICAgICAge2J1dHRvbi5sYWJlbH1cclxuICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IFxyXG4gICAgICAgIGNsYXNzTmFtZT1cIm1vZGFsLXJlZGFjdGlvblwiXHJcbiAgICAgICAgb25Nb3VzZU1vdmU9eyhlKSA9PiB7dGhpcy5vbk1vdXNlTW92ZShlKX19XHJcbiAgICAgICAgb25Nb3VzZVVwPXsoZSkgPT4ge3RoaXMub25Nb3VzZVVwKGUpfX1cclxuICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHt0aGlzLmhhbmRsZU91dHNpZGVDbGljayhlKX19XHJcbiAgICAgID5cclxuICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgc3R5bGU9e3N0eWxlfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtY29udGVudFwiXHJcbiAgICAgICAgICByZWY9eyhub2RlKSA9PiAodGhpcy5kaWFsb2cgPSBub2RlKX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2dcIj5cclxuICAgICAgICAgICAgICA8ZGl2IFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nLWhlYWRlclwiXHJcbiAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17KGUpID0+IHt0aGlzLm9uTW91c2VEb3duKGUpfX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBmbGV4R3JvdzogMX19PlxyXG4gICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2ctaGVhZGVyLXRpdGxlXCI+e3RoaXMucHJvcHMudGl0bGV9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZGlzcGxheTogJ2ZsZXgnLCBmbGV4RGlyZWN0aW9uOiBcInJvd1wiLCBtYXJnaW5MZWZ0OiAnYXV0bycsIGZsZXhHcm93OiAwfX0+XHJcbiAgICAgICAgICAgICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgbW9kYWwtZGlhbG9nLWhlYWRlci1idXR0b25cIlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7Y3Vyc29yOiAncG9pbnRlcicgLCBjb2xvcjogJyNmZWZlZmUnLCBtYXJnaW5SaWdodDogJzVweCcsIGZvbnRTaXplOiAnMTRwdCd9fVxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPVwiQ2xvc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXsoZSkgPT4ge2Uuc3RvcFByb3BhZ2F0aW9uKCk7IHRoaXMucHJvcHMub25DbG9zZSgnY2FuY2VsJyl9fVxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1kaWFsb2ctYm9keVwiPlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZy1ib2R5LWNsaWVudFwiPlxyXG4gICAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2ID5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtZGlhbG9nLWJ1dHRvbi1iYXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAge2J1dHRvbnN9ICAgXHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXYgPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBtb3ZlTWUobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlcikge1xyXG4gICAgICB0aGlzLmxlZnQgPSBsZWZ0O1xyXG4gICAgICB0aGlzLnRvcCA9IHRvcDsgLy8gLSB0aGlzLmJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbiAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcclxuICB9XHJcblxyXG4gIG9uTW91c2VEb3duKGU6IGFueSkge1xyXG4gICAgLy90aGlzLnN0b3BFdmVudEJ1YmJsZShlKTtcclxuICAgIC8vaW5jbHVkZSBjb21wb25lbnQgYm91bmRpbmcgcmVjdCB0byBhbGxvdyBmb3IgbW91c2Ugb2Zmc2V0IGludG8gY29tcG9uZW50XHJcbiAgICBsZXQgY2xpZW50UmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgbGV0IG1vdXNlT2Zmc2V0WTogbnVtYmVyID0gZS5jbGllbnRZIC0gY2xpZW50UmVjdC50b3A7XHJcbiAgICBjb25zb2xlLmxvZyhcImdyYWIgZGlhbG9nXCIpO1xyXG4gICAgdGhpcy5kcmFnRXZlbnQgPSBEcmFnRXZlbnQuc3RhcnQoZURyYWdFdmVudFR5cGUuZGlhbG9nLCB0aGlzLCBlLmNsaWVudFggLSBjbGllbnRSZWN0LmxlZnQsIG1vdXNlT2Zmc2V0WSk7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTW92ZShlOiBhbnkpIHtcclxuICAgIC8vdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICBpZih0aGlzLmRyYWdFdmVudC50eXBlID09PSBlRHJhZ0V2ZW50VHlwZS5kaWFsb2cpXHJcbiAgICB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwibW92ZSBkaWFsb2dcIik7XHJcbiAgICAgIHRoaXMubW92ZU1lKGUuY2xpZW50WCAtIHRoaXMuZHJhZ0V2ZW50Lm1vdXNlT2Zmc2V0WCwgZS5jbGllbnRZIC0gdGhpcy5kcmFnRXZlbnQubW91c2VPZmZzZXRZKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uTW91c2VVcChlOiBhbnkpIHtcclxuICAgIC8vdGhpcy5zdG9wRXZlbnRCdWJibGUoZSk7XHJcbiAgICBpZih0aGlzLmRyYWdFdmVudC50eXBlID09PSBlRHJhZ0V2ZW50VHlwZS5kaWFsb2cpXHJcbiAgICB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiZHJvcCBkaWFsb2dcIik7XHJcbiAgICAgIHRoaXMuZHJhZ0V2ZW50LmVuZChudWxsLGUuY2xpZW50WCwgZS5jbGllbnRZKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICcuL2Nzcy9JY29uUGlja2VyLmNzcyc7XHJcblxyXG4vLyBEZWNsYXJhdGlvbiBvZiB0aGUgY29tcG9uZW50IGFzIFJlYWN0IENsYXNzIENvbXBvbmVudFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJY29uUGlja2VyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwgYW55PiB7XHJcblxyXG4gICAgaWNvbnM6IGFueSA9IHt9O1xyXG5cclxuICAgIHNlbGVjdGVkSXRlbTogc3RyaW5nO1xyXG5cclxuICAgIG9uY2hhbmdlKGU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRJdGVtID0gZS50YXJnZXQuaW5uZXJUZXh0O1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UodGhpcy5zZWxlY3RlZEl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvcHM6IGFueSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IHRoaXMucHJvcHMub25DaGFuZ2VWYWx1ZTtcclxuICAgICAgICB0aGlzLmljb25zLmFzdGVyaXNrID0ge25hbWU6ICdhc3RlcmlzaycsIHRpdGxlOiAnQXN0ZXJpc2snLCBjb2RlOiAnJiN4MmE7J307XHJcbiAgICAgICAgdGhpcy5pY29ucy5wbHVzID0ge25hbWU6ICdwbHVzJywgdGl0bGU6ICdQbHVzJywgY29kZTogJyYjeDJiOyd9O1xyXG4gICAgICAgIHRoaXMuaWNvbnMuZXVybyA9IHtuYW1lOiAnZXVybycsIHRpdGxlOiAnRXVybycsIGNvZGU6ICcmI3gyMGFjOyd9O1xyXG4gICAgICAgIHRoaXMuaWNvbnMubWludXMgPSB7bmFtZTogJ21pbnVzJywgdGl0bGU6ICdNaW51cycsIGNvZGU6ICcmI3gyMjEyOyd9O1xyXG4gICAgICAgIHRoaXMuaWNvbnMuY2xvdWQgPSB7bmFtZTogJ2Nsb3VkJywgdGl0bGU6ICdDbG91ZCcsIGNvZGU6ICcmI3gyNjAxOyd9O1xyXG4gICAgICAgIHRoaXMub25jaGFuZ2UgPSB0aGlzLm9uY2hhbmdlLmJpbmQodGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG5cclxuICAgICAgICBjb25zdCBvcHRpb25zOiBKU1guRWxlbWVudFtdID0gW107XHJcbiAgICAgICAgbGV0IGNsczogc3RyaW5nO1xyXG4gICAgICAgIGZvciAoY29uc3Qgb3B0IG9mIE9iamVjdC5rZXlzKHRoaXMuaWNvbnMpKSB7XHJcbiAgICAgICAgICAgICBjb25zdCBjbHMgPSAnZ2x5cGhpY29uIGdseXBoaWNvbi0nICsgdGhpcy5pY29uc1tvcHRdLm5hbWUgKyAnIGljb24tcGlja2VyLWljb24nO1xyXG4gICAgICAgICAgICAgb3B0aW9ucy5wdXNoKDxsaSBvbkNsaWNrPXsoZSkgPT4ge3RoaXMub25jaGFuZ2UoZSk7IH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbHN9Pjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLmljb25zW29wdF0ubmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdCBkcm9wZG93bi10b2dnbGVcIiBkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9eydnbHlwaGljb24gZ2x5cGhpY29uLScgKyB0aGlzLnNlbGVjdGVkSXRlbX0+PC9zcGFuPjxzcGFuIGNsYXNzTmFtZT1cImNhcmV0XCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJkcm9wZG93bi1tZW51XCIgcm9sZT1cIm1lbnVcIj5cclxuICAgICAgICAgICAgICAgIHtvcHRpb25zfVxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyA8c2VsZWN0IGNsYXNzTmFtZT1cIm1vZGFsLWRpYWxvZy1zZWxlY3RcIiBkYXRhLXNob3ctaWNvbj1cInRydWVcIiBvbkNoYW5nZT17KGUpID0+IHt0aGlzLml0ZW1TZWxlY3RlZDsgfX0+XHJcbiAgICAgICAgLy8gICAge29wdGlvbnN9XHJcbiAgICAgICAgLy8gPC9zZWxlY3Q+XHJcbiAgfVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9