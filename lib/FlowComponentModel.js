!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(1),i=n(3);!function(e){e[e.unknown=0]="unknown",e[e.ContentString=1]="ContentString",e[e.ContentNumber=2]="ContentNumber",e[e.ContentObject=3]="ContentObject",e[e.ContentBoolean=4]="ContentBoolean",e[e.ContentList=5]="ContentList",e[e.ContentPassword=6]="ContentPassword",e[e.ContentContent=7]="ContentContent",e[e.ContentDateTime=8]="ContentDateTime",e[e.ContentEncrypted=9]="ContentEncrypted"}(o=t.eContentType||(t.eContentType={}));var a=function(){function e(e){if(this.ContentType=o.unknown,this.DeveloperName="",this.TypeElementDeveloperName="",this.TypeElementId="",this.TypeElementPropertyDeveloperName="",this.TypeElementPropertyId="",this.ValueElementId="",e)switch(this.ContentType=o[e.contentType],this.DeveloperName=e.developerName,this.TypeElementDeveloperName=e.typeElementDeveloperName,this.TypeElementId=e.typeElementId,this.TypeElementPropertyDeveloperName=e.typeElementPropertyDeveloperName,this.TypeElementPropertyId=e.typeElementPropertyId,this.ValueElementId=e.valueElementId,this.ContentType){case o.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.ContentList:this.Value=e.objectData&&e.objectData[0]?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.Value=e.contentValue}}return Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementDeveloperName",{get:function(){return this.TypeElementDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyDeveloperName",{get:function(){return this.TypeElementPropertyDeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"valueElementId",{get:function(){return this.ValueElementId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.iFlowField=function(){var e="",t=[];switch(this.ContentType){case o.ContentObject:var n=this.Value;t.push(n.iObjectData());break;case o.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value?this.Value:""}return{contentType:o[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementDeveloperName:this.TypeElementDeveloperName,typeElementId:this.TypeElementId,typeElementPropertyDeveloperName:this.TypeElementPropertyDeveloperName,typeElementPropertyId:this.TypeElementPropertyId,valueElementId:this.ValueElementId}},e}();t.FlowField=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(10),r=function(){function e(e){if(this.DeveloperName="",this.ExternalId="",this.InternalId="",this.IsSelected=!1,this.Order=0,this.TypeElementId="",this.Properties={},e&&e[0]){var t=e[0];this.DeveloperName=t.developerName,this.InternalId=t.internalId,this.ExternalId=t.externalId,this.Order=t.order,this.IsSelected=t.isSelected,this.TypeElementId=t.typeElementId;for(var n=0,r=t.properties;n<r.length;n++){var i=r[n];this.Properties[i.developerName]=new o.FlowObjectDataProperty(i)}}}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"externalId",{get:function(){return this.ExternalId},set:function(e){this.ExternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"internalId",{get:function(){return this.InternalId},set:function(e){this.InternalId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isSelected",{get:function(){return this.IsSelected},set:function(e){this.IsSelected=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},set:function(e){this.Order=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"properties",{get:function(){return this.Properties},enumerable:!0,configurable:!0}),e.newInstance=function(e){return new this([{developerName:e,externalId:"",internalId:manywho.utils.guid(),isSelected:!0,order:0,properties:[],typeElementId:""}])},e.prototype.addProperty=function(e){this.Properties[e.developerName]=e},e.prototype.removeProperty=function(e){delete this.Properties[e]},e.prototype.clone=function(t){var n=this,o=e.newInstance(t||this.DeveloperName);return Object.keys(this.properties).forEach((function(e){var t=n.properties[e].clone();o.properties[e]=t})),o},e.prototype.iObjectData=function(){for(var e=[],t=0,n=Object.keys(this.properties);t<n.length;t++){var o=n[t];e.push(this.properties[o].iFlowObjectDataProperty())}return{developerName:this.developerName,externalId:this.externalId,internalId:this.internalId,isSelected:this.isSelected,order:this.order,properties:e,typeElementId:this.TypeElementId}},e.prototype.iFlowObjectDataArray=function(){var e=[];return e.push(this.iObjectData()),e},e}();t.FlowObjectData=r},function(e,t){e.exports=React},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(0),i=n(1);!function(e){e[e.ascending=0]="ascending",e[e.descending=1]="descending"}(o=t.eSortOrder||(t.eSortOrder={}));var a=function(){function e(e){this.Items=[];for(var t=0,n=e||[];t<n.length;t++){var o=n[t];this.Items.push(new i.FlowObjectData([o]))}}return Object.defineProperty(e.prototype,"items",{get:function(){return this.Items},enumerable:!0,configurable:!0}),e.prototype.sort=function(e,t){return e===o.ascending?t?this.Items.sort((function(e,n){var o,i;switch(e.properties[t].contentType){case r.eContentType.ContentNumber:o=parseFloat(e.properties[t].value),i=parseFloat(n.properties[t].value);break;case r.eContentType.ContentDateTime:o=new Date(e.properties[t].value),i=new Date(n.properties[t].value);break;default:o=e.properties[t].value,i=n.properties[t].value}switch(!0){case o<i:return-1;case o>i:return 1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order})):t?this.Items.sort((function(e,n){if(!(e&&n&&e.properties&&n.properties&&e.properties[t]&&n.properties[t]&&e.properties[t].value&&n.properties[t].value))return 0;if(!e.properties[t])return 0;switch(!0){case e.properties[t].value<n.properties[t].value:return 1;case e.properties[t].value>n.properties[t].value:return-1;default:return 0}})):this.Items.sort((function(e,t){return e.order-t.order}))},e.prototype.addItem=function(e){this.Items.push(e)},e.prototype.clearItems=function(){this.Items=[]},e.prototype.clone=function(){var t=new e;return this.items.forEach((function(e){t.addItem(e.clone())})),t},e.prototype.iFlowObjectDataArray=function(){for(var e=[],t=0,n=this.Items;t<n.length;t++){var o=n[t];e.push(o.iObjectData())}return e},e.prototype.getItemWithPropertyName=function(e,t,n){for(var o=0,i=this.Items;o<i.length;o++){var a=i[o];if(a.properties[e]&&null!=a.properties[e].value){var s=a.properties[e].value,u=t;switch(a.properties[e].contentType){case r.eContentType.ContentString:s=s.toLowerCase(),u=u.toLowerCase();break;case r.eContentType.ContentNumber:s=s,u=parseFloat(u.toLowerCase());break;case r.eContentType.ContentBoolean:s=s,u="true"===new String(u).toLowerCase()}if(s===u)return a.properties[n]}}return null},e.prototype.getItemWithPropertyValue=function(e,t){for(var n=0,o=this.Items;n<o.length;n++){var i=o[n];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=new String(s).toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}if(a===s)return i}}},e.prototype.getIndexOfItemWithPropertyValue=function(e,t){for(var n=0;n<this.items.length;n++){var o=this.items[n];if(o.properties[e]&&null!=o.properties[e].value){var i=o.properties[e].value,a=t;switch(o.properties[e].contentType){case r.eContentType.ContentString:i=i.toLowerCase(),a=a.toLowerCase();break;case r.eContentType.ContentNumber:i=i,a=parseFloat(new String(a).toLowerCase());break;case r.eContentType.ContentBoolean:i=i,a="true"===new String(a).toLowerCase()}if(i===a)return n}}return-1},e.prototype.removeItemWithPropertyValue=function(e,t){for(var n=0,o=0;o<this.items.length;o++){var i=this.items[o];if(i.properties[e]&&null!=i.properties[e].value){var a=i.properties[e].value,s=t;switch(i.properties[e].contentType){case r.eContentType.ContentString:a=a.toLowerCase(),s=s.toLowerCase();break;case r.eContentType.ContentNumber:a=a,s=parseFloat(new String(s).toLowerCase());break;case r.eContentType.ContentBoolean:a=a,s="true"===new String(s).toLowerCase()}a===s&&(this.items.splice(o,1),n++)}}return n},e.prototype.removeItemAtIndex=function(e){var t=0;return this.items[e]&&(this.items.splice(e,1),t=e),t},e}();t.FlowObjectDataArray=a},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(a,s)}u((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=n(2);n(8);var u,l=n(5),c=n(9),p=n(0),d=n(1),h=n(3),f=n(11),y=n(12);!function(e){e[e.ready=0]="ready",e[e.loading=1]="loading",e[e.saving=2]="saving",e[e.moving=3]="moving",e[e.inititializing=4]="inititializing",e[e.inititialized=5]="inititialized",e[e.mounting=6]="mounting",e[e.mounted=7]="mounted"}(u=t.eLoadingState||(t.eLoadingState={}));var m=function(e){function t(t){var n=e.call(this,t)||this;n.Fields={},n.Attributes={},n.Outcomes={},n.sendCollaborationMessage=y(n._sendCollaborationMessage,100,null),n.Fields={},n.LoadingState=u.inititializing,n.loadValues=n.loadValues.bind(n),n.dontLoadValues=n.dontLoadValues.bind(n),n.updateValues=n.updateValues.bind(n),n.triggerOutcome=n.triggerOutcome.bind(n),n.ComponentId=n.props.id,n.ParentId=n.props.parentId,n.FlowKey=n.props.flowKey,n.Attributes={},n.loadModel=n.loadModel.bind(n),n.loadAttributes=n.loadAttributes.bind(n),n.loadOutcomes=n.loadOutcomes.bind(n),n.receiveMessage=n.receiveMessage.bind(n),n.getStateValue=n.getStateValue.bind(n),n.setStateValue=n.setStateValue.bind(n),n.getStateValueType=n.getStateValueType.bind(n),n.sendCollaborationMessage=n.sendCollaborationMessage.bind(n),n.onBeforeSend=n.onBeforeSend.bind(n),n.onDone=n.onDone.bind(n),n.calculateValue=n.calculateValue.bind(n),window.addEventListener("message",n.receiveMessage,!1),n.loadModel(),n.loadAttributes(),n.loadOutcomes();var o=manywho.settings.global("platform.uri")||window.location.origin||"https://flow.manywho.com";return n.StateId=manywho.utils.extractStateId(n.props.flowKey),n.TenantId=manywho.utils.extractTenantId(n.props.flowKey),n.url=o+"/api/run/1/state/"+n.StateId+"/values",n.userurl=o+"/api/run/1/state/"+n.StateId+"/values/03dc41dd-1c6b-4b33-bf61-cbd1d0778fff",n.valueurl=o+"/api/run/1/state/"+n.StateId+"/values/name",n.LoadingState=u.inititialized,n}return r(t,e),Object.defineProperty(t.prototype,"tenantId",{get:function(){return this.TenantId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"stateId",{get:function(){return this.StateId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"flowKey",{get:function(){return this.FlowKey},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"componentId",{get:function(){return this.ComponentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parentId",{get:function(){return this.ParentId},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isReady",{get:function(){return this.LoadingState===u.ready},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"loadingState",{get:function(){return this.LoadingState},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"outcomes",{get:function(){return this.Outcomes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"fields",{get:function(){return this.Fields},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"model",{get:function(){return this.Model},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"user",{get:function(){return this.User},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"joinURI",{get:function(){return window.location.href},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isDesignTime",{get:function(){return this.IsDesignTime},enumerable:!0,configurable:!0}),t.prototype.getAttribute=function(e,t){return this.attributes[e]?this.attributes[e].value:t||""},t.prototype.onBeforeSend=function(e,t){if(t){var n=this.getOutcomeById(t.mapElementInvokeRequest.selectedOutcomeId),o=manywho.eventManager.outcomeBeingTriggered;n&&(o&&o.id===n.id||(manywho.eventManager.outcomeBeingTriggered=n))}else manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.calculateValue=function(e){return i(this,void 0,void 0,(function(){var t,n,o,r,i,s;return a(this,(function(a){switch(a.label){case 0:if(!e.startsWith("{{")||!e.endsWith("}}"))return[3,7];t=(t=e.replace("{{","")).replace("}}",""),n=void 0,o="",r=t.split("."),i=0,a.label=1;case 1:return i<r.length?0!==i?[3,4]:this.fields[r[i]]?[3,3]:[4,this.loadValue(r[i])]:[3,6];case 2:a.sent(),a.label=3;case 3:return(n=this.fields[r[i]])?n.ContentType!==p.eContentType.ContentObject&&n.ContentType!==p.eContentType.ContentList&&(o=n.value):(console.log("The Value ["+r[i]+"] was not found, have you included it in your flow"),o=e),[3,5];case 4:n&&(s=n.value.properties[r[i]])?s.contentType===p.eContentType.ContentObject||s.contentType===p.eContentType.ContentList?n=n.value.properties[r[i]].value:o=n.value.properties[r[i]].value:o=e,a.label=5;case 5:return i++,[3,1];case 6:return[2,o];case 7:return[2,e]}}))}))},t.prototype.onDone=function(e,t){var n=this;if(manywho.eventManager.outcomeBeingTriggered&&manywho.eventManager.outcomeBeingTriggered.attributes){var o=manywho.eventManager.outcomeBeingTriggered;Object.keys(manywho.eventManager.outcomeBeingTriggered.attributes).forEach((function(e){return i(n,void 0,void 0,(function(){var t,n,r;return a(this,(function(i){switch(i.label){case 0:switch(t=manywho.eventManager.outcomeBeingTriggered.attributes[e],t.name.toLowerCase()){case"autoclose":return[3,1];case"autoopen":return[3,2];case"autonav":case"automove":return[3,6];case"autoprint":return[3,10]}return[3,11];case 1:return"true"===t.value.toLowerCase()&&window.close(),[3,11];case 2:return(n=o.attributes.AutoOpenUrl||void 0)&&n.value.length>0?[4,this.calculateValue(n.value)]:[3,4];case 3:return r=i.sent(),window.open(r,"_blank"),[3,5];case 4:alert("No 'AutoOpenUrl' specified in the outcome's attributes"),i.label=5;case 5:return[3,11];case 6:return(n=o.attributes.AutoNavUrl||void 0)&&n.value.length>0?[4,this.calculateValue(n.value)]:[3,8];case 7:return r=i.sent(),window.open(r,"_blank"),[3,9];case 8:alert("No 'AutoNavUrl' specified in the outcome's attributes"),i.label=9;case 9:return[3,11];case 10:return window.print(),[3,11];case 11:return[2]}}))}))}))}this.LoadingState=u.ready,manywho.eventManager.outcomeBeingTriggered=void 0},t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){var e,t,n,o;return a(this,(function(r){switch(r.label){case 0:switch(this.LoadingState=u.mounting,manywho.eventManager.addDoneListener(this.onDone,this.componentId+"_core"),manywho.eventManager.addBeforeSendListener(this.onBeforeSend,this.componentId+"_core"),e=manywho.model.getComponent(this.ComponentId,this.FlowKey),t=manywho.state.getComponent(this.componentId,this.flowKey)||{},e.contentType){case"ContentObject":return[3,1];case"ContentList":return[3,4]}return[3,7];case 1:return n=void 0,t.objectData&&t.objectData.length>0?(n=t.objectData,n=JSON.parse(JSON.stringify(n)),[4,this.setStateValue(new d.FlowObjectData(n),!0)]):[3,3];case 2:r.sent(),r.label=3;case 3:return[3,9];case 4:return o=void 0,t.objectData&&t.objectData.length>0?(o=t.objectData,o=JSON.parse(JSON.stringify(o)),[4,this.setStateValue(new h.FlowObjectDataArray(o),!0)]):[3,6];case 5:r.sent(),r.label=6;case 6:return[3,9];case 7:return[4,this.setStateValue(e.contentValue,!0)];case 8:return r.sent(),[3,9];case 9:return this.LoadingState=u.mounted,manywho.utils.removeLoadingIndicator("loader"),[2,Promise.resolve()]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){return manywho.eventManager.removeBeforeSendListener(this.componentId+"_core"),manywho.eventManager.removeDoneListener(this.componentId+"_core"),[2,Promise.resolve()]}))}))},t.prototype.loadOutcome=function(e){if(e){var t=manywho.model.getOutcome(e,this.props.flowKey);if(t)return this.Outcomes[t.developerName]=new f.FlowOutcome(t),this.Outcomes[t.developerName]}},t.prototype.loadOutcomes=function(){this.Outcomes={};for(var e=manywho.model.getOutcomes(this.props.id,this.props.flowKey),t=0,n=e;t<n.length;t++){var o=n[t];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}for(var r=0,i=e=manywho.model.getOutcomes("",this.props.flowKey);r<i.length;r++){o=i[r];this.Outcomes[o.developerName]=new f.FlowOutcome(o)}},t.prototype.getOutcomeById=function(e){var t,n=this;return Object.keys(this.outcomes).forEach((function(o){n.outcomes[o].id===e&&(t=n.outcomes[o])})),t||(t=this.loadOutcome(e)),t},t.prototype.loadAttributes=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey).attributes;if(e)for(var t=0,n=Object.keys(e);t<n.length;t++){var o=n[t];this.Attributes[o]=new l.FlowAttribute(o,e[o])}},t.prototype.loadModel=function(){var e=manywho.model.getComponent(this.ComponentId,this.FlowKey);if(e){this.Model={contentType:e.contentType,dataSource:new h.FlowObjectDataArray([]),developerName:e.developerName,displayColumns:[],enabled:e.isEnabled,height:e.height,helpInfo:e.helpInfo,hintInfo:e.hintValue,joinUri:this.joinURI,label:e.label,maxSize:e.maxSize,multiSelect:e.isMultiSelect,readOnly:!e.isEditable,required:e.isRequired,size:e.size,validationMessage:e.validationMessage,visible:e.isVisible,width:e.width};var t=e.objectData;if(t)for(var n=0,o=t;n<o.length;n++){var r=o[n];this.Model.dataSource.addItem(new d.FlowObjectData([r]))}var i=e.columns;if(i)for(var a=0,s=i;a<s.length;a++){var u=s[a];this.Model.displayColumns.push(new c.FlowDisplayColumn(u))}}},t.prototype.loadValue=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){return this.LoadingState=u.loading,(t=manywho.connection.request(this,"",this.valueurl+"/"+e,"GET",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),{}))&&(this.Fields[t.developerName]=new p.FlowField(t)),this.LoadingState=u.ready,[2,Promise.resolve()]}))}))},t.prototype.getResultBodyText=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(t){return[2,e.text().then((function(e){return e.startsWith('"')&&(e=e.substr(1)),e.endsWith('"')&&(e=e.substr(0,e.length-1)),e}))]}))}))},t.prototype.callRequest=function(e,t,n,o){return i(this,void 0,void 0,(function(){var r,s,u=this;return a(this,(function(l){switch(l.label){case 0:return r=[],(s={}).method=t,s.headers={"Content-Type":"application/json",Authorization:o,ManyWhoTenant:this.tenantId},s.credentials="same-origin","POST"!==t&&"PUT"!==t||(s.body=n),[4,fetch(e,s).then((function(e){return i(u,void 0,void 0,(function(){var t,n;return a(this,(function(o){switch(o.label){case 0:return 200!==e.status?[3,2]:[4,this.getResultBodyText(e)];case 1:return t=o.sent(),JSON.parse(t).forEach((function(e){r.push(e)})),console.log("Loaded Values"),[2,r];case 2:return[4,this.getResultBodyText(e)];case 3:return n=o.sent(),console.log("Can't load values - "+n),[2,r]}}))}))}))];case 1:return l.sent(),[2]}}))}))},t.prototype.callRequestOld=function(e,t,n){return i(this,void 0,void 0,(function(){return a(this,(function(n){switch(n.label){case 0:return[4,manywho.connection.request(this,null,e,t,this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),null)];case 1:return[2,n.sent()]}}))}))},t.prototype.loadValues=function(){return i(this,void 0,void 0,(function(){var e,t,n,o=this;return a(this,(function(r){switch(r.label){case 0:return this.LoadingState=u.loading,this.Fields={},[4,this.callRequestOld(this.url,"GET",{})];case 1:return(r.sent()||[]).map((function(e){e&&(o.Fields[e.developerName]=new p.FlowField(e))})),[4,this.callRequestOld(this.userurl,"GET",{})];case 2:return(e=r.sent())&&(t=new p.FlowField(e),n=t.value.properties,this.User={directoryId:n["Directory Id"].value,directoryName:n["Directory Name"].value,email:n.Email.value||"mark",firstName:n["First Name"].value,groupId:n["Primary Group Id"].value,groupName:n["Primary Group Name"].value,id:n["User ID"].value,ipAddress:n["IP Address"].value,language:n.Language.value,lastName:n["Last Name"].value,location:n.Location.value,roleId:n["Role Id"].value,roleName:n["Role Name"].value,status:n.Status.value,userName:n.Username.value}),this.LoadingState=u.ready,[2,Promise.resolve()]}}))}))},t.prototype.dontLoadValues=function(){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.LoadingState=u.ready,[2,Promise.resolve()]}))}))},t.prototype.getStateValue=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);switch(t.contentType){case"ContentObject":return new d.FlowObjectData(e.objectData&&e.objectData[0]?e.objectData[0]:t.objectData[0]);case"ContentList":return new h.FlowObjectDataArray(e.objectData?e.objectData:t.objectData);default:return e.contentValue?e.contentValue:""}},t.prototype.getStateValueType=function(){var e=manywho.state.getComponent(this.componentId,this.flowKey)||{},t=manywho.model.getComponent(this.ComponentId,this.FlowKey);switch(t.contentType){case"ContentObject":return new d.FlowObjectData(e.objectData&&e.objectData[0]?e.objectData[0]:t.objectData[0]);case"ContentList":return new h.FlowObjectDataArray(e.objectData?e.objectData:t.objectData);default:return e.contentValue?e.contentValue:""}},t.prototype.setStateValue=function(e,t){return i(this,void 0,void 0,(function(){var t,n,o,r,i;return a(this,(function(a){if(this.LoadingState===u.mounting||this.LoadingState===u.ready){switch(t=this.loadingState,this.LoadingState=u.saving,n=manywho.model.getComponent(this.ComponentId,this.FlowKey),manywho.state.getComponent(this.componentId,this.flowKey)||{},o=void 0,n.contentType){case"ContentObject":r=null,e&&(r=e.iFlowObjectDataArray(),r=JSON.parse(JSON.stringify(r))),o={objectData:r},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentList":i=null,e&&(i=e.iFlowObjectDataArray(),i=JSON.parse(JSON.stringify(i))),o={objectData:i},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;case"ContentDate":o={contentValue:e.toISOString()},manywho.state.setComponent(this.componentId,o,this.flowKey,!0);break;default:o={contentValue:e},manywho.state.setComponent(this.componentId,o,this.flowKey,!0)}this.LoadingState=t,manywho.collaboration.isInitialized(this.flowKey)}return[2,Promise.resolve()]}))}))},t.prototype.eventHandled=function(e,t){console.log("ping")},t.prototype.updateValues=function(e){return i(this,void 0,void 0,(function(){var t,n,o,r,i=this;return a(this,(function(a){switch(a.label){case 0:if(this.LoadingState=u.saving,t=[],e.constructor.name===p.FlowField.name)t.push(e.iFlowField());else for(n=0,o=e;n<o.length;n++)r=o[n],t.push(r.iFlowField());return[4,manywho.connection.request(this,null,this.url,"POST",this.TenantId,this.StateId,manywho.state.getAuthenticationToken(this.FlowKey),t)];case 1:return a.sent(),manywho.collaboration.isInitialized(this.flowKey)&&t.forEach((function(e){manywho.collaboration.push(i.ComponentId,{message:{action:"REFRESH_FIELD",fieldName:e.developerName}},i.flowKey)})),this.LoadingState=u.ready,[2,Promise.resolve()]}}))}))},t.prototype._sendCollaborationMessage=function(e){manywho.collaboration.isInitialized(this.flowKey)&&manywho.collaboration.push(this.ComponentId,{message:e},this.flowKey)},t.prototype.triggerOutcome=function(e,t){return i(this,void 0,void 0,(function(){var n;return a(this,(function(o){switch(o.label){case 0:return this.LoadingState=u.moving,t||(t=[]),this.outcomes[e]&&(n=this.outcomes[e].iFlowOutcome()),n?[4,manywho.component.onOutcome(n,t,this.FlowKey)]:[3,2];case 1:return o.sent(),[3,3];case 2:this.log("Could not find outcome "+e),o.label=3;case 3:return[2,Promise.resolve()]}}))}))},t.prototype.moveTo=function(e,t){return i(this,void 0,void 0,(function(){return a(this,(function(e){return this.LoadingState=u.moving,t||(t=[]),[2,Promise.resolve()]}))}))},t.prototype.log=function(e){var t=new Date,n="["+[("0"+t.getHours()).slice(-2),("0"+t.getMinutes()).slice(-2),("0"+t.getSeconds()).slice(-2)].join(":")+"] ";console.log(n+e)},t.prototype.launchFlowSilent=function(e,t,n,o){return i(this,void 0,void 0,(function(){var e,n,r;return a(this,(function(i){return e=manywho.settings.global("platform.uri")||"https://flow.manywho.com",n=e+"/api/run/1/state",(r={}).id=t,r.developerName=null,r.inputs=o?o.iFlowObjectDataArray():null,manywho.connection.request(this,"",n,"POST",this.TenantId,"",manywho.state.getAuthenticationToken(this.FlowKey),r),[2,Promise.resolve()]}))}))},t.prototype.launchFlowTab=function(e,t,n,o){return i(this,void 0,void 0,(function(){var o,r;return a(this,(function(i){return o=manywho.settings.global("platform.uri")||"https://flow.boomi.com",r=o+"/"+e+"/play/"+n+"?flow-id="+t,window.open(r,"_new"),[2,Promise.resolve()]}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){var e,t;return a(this,(function(n){switch(n.label){case 0:if(e=manywho.state.getComponent(this.componentId,this.flowKey),t=e.message,this.loadModel(),t&&manywho.state.setComponent(this.componentId,{message:{}},this.flowKey,!1),!t||!t.action)return[3,6];switch(t.action.toUpperCase()){case"REFRESH_FIELDS":return[3,1];case"REFRESH_FIELD":return[3,3]}return[3,5];case 1:return[4,this.loadValues()];case 2:return n.sent(),[3,6];case 3:return[4,this.loadValue(t.fieldName)];case 4:return n.sent(),[3,6];case 5:return[3,6];case 6:return[2,t]}}))}))},t.prototype.receiveMessage=function(e){return i(this,void 0,void 0,(function(){var t;return a(this,(function(n){switch(n.label){case 0:if(!e.data)return[3,9];if(!(t=e.data).action)return[3,9];switch(t.action.toUpperCase()){case"OUTCOME":return[3,1];case"REFRESH_FIELDS":return[3,3];case"REFRESH_FIELD":return[3,5]}return[3,7];case 1:return[4,this.triggerOutcome(t.data)];case 2:return n.sent(),[3,9];case 3:return[4,this.loadValues()];case 4:return n.sent(),[3,9];case 5:return[4,this.loadValue(t.fieldName)];case 6:return n.sent(),[3,9];case 7:return[4,this.handleMessage(t)];case 8:return n.sent(),[3,9];case 9:return[2,Promise.resolve()]}}))}))},t.prototype.handleMessage=function(e){return i(this,void 0,void 0,(function(){return a(this,(function(e){return[2,Promise.resolve()]}))}))},t}(s.Component);t.FlowBaseComponent=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){this.Name=e,this.Value=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.Name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.Value},enumerable:!0,configurable:!0}),e}();t.FlowAttribute=o},function(e,t,n){"use strict";function o(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),o(n(7)),o(n(14)),o(n(15)),o(n(17))},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(a,s)}u((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),[4,this.dontLoadValues()];case 2:return t.sent(),[2]}}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidUpdate.call(this)];case 1:return t.sent(),[2]}}))}))},t}(n(4).FlowBaseComponent);t.FlowComponent=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),manywho.eventManager||(manywho.eventManager={},manywho.eventManager.beforeSendListeners={},manywho.eventManager.doneListeners={},manywho.eventManager.failListeners={},manywho.eventManager.outcomeBeingTriggered,manywho.eventManager.beforeSend=function(e,t){for(var n in manywho.eventManager.beforeSendListeners)manywho.eventManager.beforeSendListeners[n](e,t)},manywho.eventManager.done=function(e,t){for(var n in manywho.eventManager.doneListeners)manywho.eventManager.doneListeners[n](e,t)},manywho.eventManager.fail=function(e,t){for(var n in manywho.eventManager.failListeners)manywho.eventManager.failListeners[n](e,t)},manywho.eventManager.addBeforeSendListener=function(e,t){manywho.eventManager.beforeSendListeners[t]=e},manywho.eventManager.removeBeforeSendListener=function(e){delete manywho.eventManager.beforeSendListeners[e]},manywho.eventManager.addDoneListener=function(e,t){manywho.eventManager.doneListeners[t]=e},manywho.eventManager.removeDoneListener=function(e){delete manywho.eventManager.doneListeners[e]},manywho.eventManager.addFailListener=function(e,t){manywho.eventManager.failListeners[t]=e},manywho.eventManager.removeFailListener=function(e){delete manywho.eventManager.failListeners[e]},manywho.settings.initialize(null,{invoke:{beforeSend:manywho.eventManager.beforeSend,done:manywho.eventManager.done,fail:manywho.eventManager.fail}}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=function(){function e(e){this.Column=e,this.ComponentType=e.componentType,this.ContentFormat=e.contentFormat,this.ContentType=o.eContentType[e.contentType],this.DeveloperName=e.developerName,this.DisplayOrder=e.order,this.Label=e.label,this.ReadOnly=!e.isEditable,this.TypeElememtPropertyToDisplayId=e.typeElememtPropertyToDisplayId,this.TypeElementPropertyId=e.typeElementPropertyId,this.Visible=e.isDisplayValue}return Object.defineProperty(e.prototype,"componentType",{get:function(){return this.ComponentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"visible",{get:function(){return this.Visible},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"readOnly",{get:function(){return this.ReadOnly},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"displayOrder",{get:function(){return this.DisplayOrder},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElememtPropertyToDisplayId",{get:function(){return this.TypeElememtPropertyToDisplayId},enumerable:!0,configurable:!0}),e.prototype.iFlowDisplayColumn=function(){return this.Column},e}();t.FlowDisplayColumn=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=n(1),i=n(3),a=function(){function e(e){if(this.ContentFormat="",this.ContentType=o.eContentType.unknown,this.DeveloperName="",this.TypeElementId="",this.TypeElementPropertyId="",e)switch(this.DeveloperName=e.developerName,this.ContentType=o.eContentType[e.contentType],this.ContentFormat=e.contentFormat?e.contentFormat:"",this.TypeElementId=e.typeElementId?e.typeElementId:"",this.TypeElementPropertyId=e.typeElementPropertyId,this.ContentType){case o.eContentType.ContentObject:this.Value=e.objectData?new r.FlowObjectData(e.objectData):void 0;break;case o.eContentType.ContentList:this.value=e.objectData?new i.FlowObjectDataArray(e.objectData):new i.FlowObjectDataArray([]);break;default:this.value=e.contentValue?e.contentValue:""}}return e.newInstance=function(e,t,n){var r="",i=[];switch(t){case o.eContentType.ContentObject:var a=n;i.push(a.iObjectData());break;case o.eContentType.ContentList:i=n.iFlowObjectDataArray();break;default:r=n}return new this({contentFormat:"",contentType:o.eContentType[t],contentValue:r,developerName:e,objectData:i,typeElementId:"",typeElementPropertyId:""})},Object.defineProperty(e.prototype,"contentFormat",{get:function(){return this.ContentFormat},set:function(e){this.contentFormat=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"contentType",{get:function(){return this.ContentType},set:function(e){this.ContentType=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},set:function(e){this.DeveloperName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementId",{get:function(){return this.TypeElementId},set:function(e){this.TypeElementId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeElementPropertyId",{get:function(){return this.TypeElementPropertyId},set:function(e){this.TypeElementPropertyId=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){switch(this.contentType){case o.eContentType.ContentNumber:return parseFloat(this.Value?this.Value:"0");case o.eContentType.ContentBoolean:return"true"===new String(this.Value).toLowerCase();default:return this.Value}},set:function(e){this.Value=e},enumerable:!0,configurable:!0}),e.prototype.clone=function(){var t;switch(this.contentType){case o.eContentType.ContentList:t=new i.FlowObjectDataArray,this.value.items.forEach((function(e){t.addItem(e.clone(e.developerName))}));break;case o.eContentType.ContentObject:t=this.value.clone(this.value.developerName);break;default:t=this.value}return e.newInstance(this.developerName,this.contentType,t)},e.prototype.iFlowObjectDataProperty=function(){var e="",t=[];switch(this.ContentType){case o.eContentType.ContentObject:var n=this.Value;n&&n.developerName&&n.developerName.length>0&&t.push(n.iObjectData());break;case o.eContentType.ContentList:t=this.Value.iFlowObjectDataArray();break;default:e=this.Value}return{contentFormat:this.ContentFormat,contentType:o.eContentType[this.ContentType],contentValue:e,developerName:this.DeveloperName,objectData:t,typeElementId:this.TypeElementId,typeElementPropertyId:this.TypeElementPropertyId}},Object.defineProperty(e.prototype,"displayString",{get:function(){var e="";if(this.Value)switch(this.ContentType){case o.eContentType.ContentString:case o.eContentType.ContentNumber:e=this.Value;break;case o.eContentType.ContentBoolean:e=!0===this.Value?"True":"False";break;case o.eContentType.ContentDateTime:var t=Date.parse(this.Value);if(!isNaN(t)){var n=new Date(t);return e.length<=10?n.toLocaleDateString():n.toLocaleString()}break;default:e=o.eContentType[this.ContentType]}else e="Undefined";return e},enumerable:!0,configurable:!0}),e}();t.FlowObjectDataProperty=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(5);!function(e){e.Save="SAVE",e.PartialSave="PARTIAL_SAVE",e.NoSave="NO_SAVE"}(t.ePageActionBindingType||(t.ePageActionBindingType={})),function(e){e.New="NEW",e.Query="QUERY",e.Insert="INSERT",e.Update="UPDATE",e.Upsert="UPSERT",e.Delete="DELETE",e.Remove="REMOVE",e.Add="ADD",e.Edit="EDIT",e.Next="NEXT",e.Back="BACK",e.Done="DONE",e.Save="SAVE",e.Cancel="CANCEL",e.Apply="APPLY",e.Import="IMPORT",e.Close="CLOSE",e.Open="OPEN",e.Submit="SUBMIT",e.Escalate="ESCALATE",e.Reject="REJECT",e.Delegate="DELEGATE"}(t.ePageActionType||(t.ePageActionType={}));var r=function(){function e(e){if(this.DeveloperName=e.developerName,this.Id=e.id,this.IsBulkAction=e.isBulkAction,this.IsOut=e.isOut,this.Label=e.label,this.Order=e.order,this.PageActionBindingType=e.pageActionBindingType,this.PageActionType=e.pageActionType,this.PageObjectBindingId=e.pageObjectBindingId,this.Attributes={},e.attributes)for(var t=0,n=Object.keys(e.attributes);t<n.length;t++){var r=n[t];this.Attributes[r]=new o.FlowAttribute(r,e.attributes[r])}this.Outcome=e}return Object.defineProperty(e.prototype,"developerName",{get:function(){return this.DeveloperName},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this.Id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isBulkAction",{get:function(){return this.IsBulkAction},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isOut",{get:function(){return this.IsOut},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"label",{get:function(){return this.Label},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"order",{get:function(){return this.Order},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionBindingType",{get:function(){return this.PageActionBindingType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageActionType",{get:function(){return this.PageActionType},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pageObjectBindingId",{get:function(){return this.PageObjectBindingId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"attributes",{get:function(){return this.Attributes},enumerable:!0,configurable:!0}),e.prototype.iFlowOutcome=function(){return this.Outcome},e}();t.FlowOutcome=r},function(e,t,n){(function(t){var n="Expected a function",o=NaN,r="[object Symbol]",i=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,u=/^0o[0-7]+$/i,l=parseInt,c="object"==typeof t&&t&&t.Object===Object&&t,p="object"==typeof self&&self&&self.Object===Object&&self,d=c||p||Function("return this")(),h=Object.prototype.toString,f=Math.max,y=Math.min,m=function(){return d.Date.now()};function b(e,t,o){var r,i,a,s,u,l,c=0,p=!1,d=!1,h=!0;if("function"!=typeof e)throw new TypeError(n);function b(t){var n=r,o=i;return r=i=void 0,c=t,s=e.apply(o,n)}function w(e){var n=e-l;return void 0===l||n>=t||n<0||d&&e-c>=a}function O(){var e=m();if(w(e))return C(e);u=setTimeout(O,function(e){var n=t-(e-l);return d?y(n,a-(e-c)):n}(e))}function C(e){return u=void 0,h&&r?b(e):(r=i=void 0,s)}function T(){var e=m(),n=w(e);if(r=arguments,i=this,l=e,n){if(void 0===u)return function(e){return c=e,u=setTimeout(O,t),p?b(e):s}(l);if(d)return u=setTimeout(O,t),b(l)}return void 0===u&&(u=setTimeout(O,t)),s}return t=v(t)||0,g(o)&&(p=!!o.leading,a=(d="maxWait"in o)?f(v(o.maxWait)||0,t):a,h="trailing"in o?!!o.trailing:h),T.cancel=function(){void 0!==u&&clearTimeout(u),c=0,r=l=i=u=void 0},T.flush=function(){return void 0===u?s:C(m())},T}function g(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function v(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&h.call(e)==r}(e))return o;if(g(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=g(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(i,"");var n=s.test(e);return n||u.test(e)?l(e.slice(2),n?2:8):a.test(e)?o:+e}e.exports=function(e,t,o){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError(n);return g(o)&&(r="leading"in o?!!o.leading:r,i="trailing"in o?!!o.trailing:i),b(e,t,{leading:r,maxWait:t,trailing:i})}}).call(this,n(13))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function a(e){try{u(o.next(e))}catch(e){i(e)}}function s(e){try{u(o.throw(e))}catch(e){i(e)}}function u(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(a,s)}u((o=o.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t){var n=e.call(this,t)||this;return n.reloadValues=n.reloadValues.bind(n),n}return r(t,e),t.prototype.componentDidMount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidMount.call(this)];case 1:return t.sent(),manywho.eventManager.addDoneListener(this.reloadValues,this.componentId+"_PG"),[4,this.loadValues()];case 2:return t.sent(),[2,Promise.resolve()]}}))}))},t.prototype.componentDidUpdate=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentDidUpdate.call(this)];case 1:return t.sent(),[2]}}))}))},t.prototype.componentWillUnmount=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,e.prototype.componentWillUnmount.call(this)];case 1:return t.sent(),manywho.eventManager.removeDoneListener(this.componentId+"_PG"),[2,Promise.resolve()]}}))}))},t.prototype.triggerOutcome=function(t,n){return i(this,void 0,void 0,(function(){return a(this,(function(o){switch(o.label){case 0:return[4,e.prototype.triggerOutcome.call(this,t,n)];case 1:return o.sent(),[2,Promise.resolve()]}}))}))},t.prototype.reloadValues=function(e,t){return i(this,void 0,void 0,(function(){return a(this,(function(e){switch(e.label){case 0:return[4,this.loadModel()];case 1:return e.sent(),[4,this.loadValues()];case 2:return e.sent(),[4,this.forceUpdate()];case 3:return e.sent(),[2,Promise.resolve()]}}))}))},t}(n(4).FlowBaseComponent);t.FlowPage=s},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(2);n(16);var a,s=function(e,t){this.label=e,this.handler=t};t.modalDialogButton=s,function(e){e[e.unknown=0]="unknown",e[e.canvas=1]="canvas",e[e.table=2]="table",e[e.link=3]="link",e[e.dialog=4]="dialog"}(a=t.eDragEventType||(t.eDragEventType={}));var u=function(){function e(){this.type=a.unknown,this.sourceElement=null,this.targetElement=null,this.mouseX=0,this.mouseY=0,this.mouseOffsetX=0,this.mouseOffsetY=0}return e.start=function(t,n,o,r){var i=new e;return i.type=t,i.sourceElement=n,i.targetElement=null,i.mouseX=o,i.mouseY=r,i.mouseOffsetX=o,i.mouseOffsetY=r,i},e.prototype.drag=function(e,t){this.mouseX=e,this.mouseY=t},e.prototype.end=function(e,t,n){this.targetElement=e,this.mouseX=t,this.mouseY=n,this.type=a.unknown},e}();t.DragEvent=u;var l=function(e){function t(t){var n=e.call(this,t)||this;return n.dragEvent=new u,n.top=0,n.left=0,n.handleKeyUp=n.handleKeyUp.bind(n),n.handleOutsideClick=n.handleOutsideClick.bind(n),n.onCloseRequest=n.onCloseRequest.bind(n),n}return r(t,e),t.prototype.stopEventBubble=function(e){return e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.cancelBubble=!0,e.returnValue=!1,!1},t.prototype.componentDidMount=function(){if(this.dialog){var e=this.dialog.offsetParent.clientWidth/2,t=this.dialog.offsetParent.clientHeight/2,n=this.dialog.clientWidth/2,o=this.dialog.clientHeight/2;this.left=e-n,this.top=t-o,this.forceUpdate(),this.dialog.classList.add("shown"),this.forceUpdate()}},t.prototype.componentWillUnmount=function(){},t.prototype.onCloseRequest=function(){this.props.onCloseRequest&&this.props.onCloseRequest()},t.prototype.handleKeyUp=function(e){var t=this,n={27:function(){e.preventDefault(),t.onCloseRequest()}};n[e.keyCode]&&n[e.keyCode]()},t.prototype.handleOutsideClick=function(e){this.dialog||this.dialog.contains(e.target)||this.onCloseRequest()},t.prototype.render=function(){var e=this,t={};t.left=this.left,t.top=this.top;for(var n=[],o=function(e){n.push(i.createElement("button",{className:"modal-dialog-button-bar-button",title:"Cancel",onMouseDown:function(t){t.stopPropagation(),e.handler()}},e.label))},r=0,a=this.props.buttons;r<a.length;r++){o(a[r])}return i.createElement("div",{className:"modal-redaction",onMouseMove:function(t){e.onMouseMove(t)},onMouseUp:function(t){e.onMouseUp(t)},onMouseDown:function(t){e.handleOutsideClick(t)}},i.createElement("div",{style:t,className:"modal-content",ref:function(t){return e.dialog=t}},i.createElement("div",{className:"modal-dialog"},i.createElement("div",{className:"modal-dialog-header",onMouseDown:function(t){e.onMouseDown(t)}},i.createElement("div",{style:{display:"flex",flexDirection:"row",flexGrow:1}},i.createElement("span",{className:"modal-dialog-header-title"},this.props.title)),i.createElement("div",{style:{display:"flex",flexDirection:"row",marginLeft:"auto",flexGrow:0}},i.createElement("span",{className:"glyphicon glyphicon-remove modal-dialog-header-button",style:{cursor:"pointer",color:"#fefefe",marginRight:"5px",fontSize:"14pt"},title:"Close",onMouseDown:function(t){t.stopPropagation(),e.props.onClose("cancel")}}))),i.createElement("div",{className:"modal-dialog-body"},i.createElement("div",{className:"modal-dialog-body-client"},this.props.children)),i.createElement("div",{className:"modal-dialog-button-bar"},n))))},t.prototype.moveMe=function(e,t){this.left=e,this.top=t,this.forceUpdate()},t.prototype.onMouseDown=function(e){var t=e.target.getBoundingClientRect(),n=e.clientY-t.top;console.log("grab dialog"),this.dragEvent=u.start(a.dialog,this,e.clientX-t.left,n)},t.prototype.onMouseMove=function(e){this.dragEvent.type===a.dialog&&(console.log("move dialog"),this.moveMe(e.clientX-this.dragEvent.mouseOffsetX,e.clientY-this.dragEvent.mouseOffsetY))},t.prototype.onMouseUp=function(e){this.dragEvent.type===a.dialog&&(console.log("drop dialog"),this.dragEvent.end(null,e.clientX,e.clientY))},t}(i.Component);t.ModalDialog=l},function(e,t,n){},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(2);n(18);var a=function(e){function t(t){var n=e.call(this,t)||this;return n.icons={},n.selectedItem=n.props.onChangeValue,n.icons.asterisk={name:"asterisk",title:"Asterisk",code:"&#x2a;"},n.icons.plus={name:"plus",title:"Plus",code:"&#x2b;"},n.icons.euro={name:"euro",title:"Euro",code:"&#x20ac;"},n.icons.minus={name:"minus",title:"Minus",code:"&#x2212;"},n.icons.cloud={name:"cloud",title:"Cloud",code:"&#x2601;"},n.onchange=n.onchange.bind(n),n}return r(t,e),t.prototype.onchange=function(e){this.selectedItem=e.target.innerText,this.props.onChange&&this.props.onChange(this.selectedItem),this.forceUpdate()},t.prototype.render=function(){for(var e=this,t=[],n=0,o=Object.keys(this.icons);n<o.length;n++){var r=o[n],a="glyphicon glyphicon-"+this.icons[r].name+" icon-picker-icon";t.push(i.createElement("li",{onClick:function(t){e.onchange(t)}},i.createElement("span",{className:a}),this.icons[r].name))}return i.createElement("div",{className:"btn-group"},i.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle","data-toggle":"dropdown"},i.createElement("span",{className:"glyphicon glyphicon-"+this.selectedItem}),i.createElement("span",{className:"caret"})),i.createElement("ul",{className:"dropdown-menu",role:"menu"},t))},t}(i.Component);t.default=a},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,